"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

;

function addBestiary_pack(pack, pack_name, list_id) {
  var list = document.querySelector(list_id);
  var elems = list.querySelectorAll('li');
  elems.forEach(function (el) {
    return el.remove();
  });
  pack.forEach(function (el, i) {
    list.insertAdjacentHTML('beforeEnd', "<li class=\"bestiary-list__el\">\n  \t\t<img src=\"./assets/images/".concat(pack_name, "/").concat(el.img, ".png\">\n  \t\t<h3 class=\"title\">").concat(el.bestiary.title, "</h3>\n  \t\t<p class=\"text scroll_1\">").concat(el.bestiary.text, "</p>\n  \t\t<div class=\"hr\"></div>\n  \t</li>"));
  });
}

;

function dark_theme() {
  var main_cont = document.querySelector('.mainContent');
  var logo = document.querySelector('.logo');

  logo.onclick = function () {
    check_theme();
  };

  function check_theme() {
    if (logo.classList.contains('_active')) {
      main_cont.classList.remove('_dark');
      logo.classList.remove('_active');
    } else {
      main_cont.classList.add('_dark');
      logo.classList.add('_active');
    }
  }

  check_theme();
}

dark_theme();
;
/*_______________req*/

var d_pack_1 = './resources/data/pack_1.json';
var d_pack_2 = './resources/data/pack_2.json';
sendRequest('GET', d_pack_1).then(function (data) {
  addCard(slider_1, '#slider-cards_1', 'pack_1', data.pack_1);
  addBestiary_pack(data.pack_1, 'pack_1', '#bestiary-pack_1');
})["catch"](function (err) {
  return console.log(err);
});
sendRequest('GET', d_pack_2).then(function (data) {
  addCard(slider_2, '#slider-cards_2', 'pack_2', data.pack_2);
  addBestiary_pack(data.pack_2, 'pack_2', '#bestiary-pack_2');
})["catch"](function (err) {
  return console.log(err);
});

function hamburger() {
  var hamburger = document.querySelector('.hamburger');
  var hamburger_menu = document.querySelector('.nav');
  var link_elems = document.querySelectorAll('.nav__link');
  var header = document.querySelector('.header');
  var body = document.querySelector('body');
  var preloader = document.querySelector('.preloading');

  hamburger.onclick = function () {
    hamburger.classList.toggle('_active');
  };

  setInterval(function () {
    if (preloader.classList.contains('_active')) {
      body.style.overflow = 'hidden';
    } else if (hamburger.classList.contains("_active")) {
      header.classList.add('header-bg-none');
      hamburger_menu.classList.add('hamburger-menu_active');
      body.style.overflow = 'hidden';
    } else {
      header.classList.remove('header-bg-none');
      hamburger_menu.classList.remove('hamburger-menu_active');
      body.style.overflow = 'auto';
    }
  }, 100);
  link_elems.forEach(function (item, i) {
    item.onclick = function () {
      hamburger.classList.remove("_active");
    };
  });
}

hamburger();
;

function header_fix() {
  var header = document.querySelector('.header');

  document.onscroll = function () {
    showHeader();
  };

  function showHeader() {
    if (window.pageYOffset > 200) {
      header.classList.add('header_fixed');
    } else {
      header.classList.remove('header_fixed');
    }
  }
}

header_fix();
;

function hover_bg_img() {
  var slide_box = document.querySelector('.hover-img-bg');

  slide_box.onmousedown = function () {
    slide_box.onmousemove = function (e) {
      var x = e.offsetX;
      document.querySelector('.hover-img-bg__box').style.width = x + 'px';
    };
  };

  slide_box.addEventListener("touchstart", function (e_1) {
    document.querySelector('.hover-img-bg__box').style.width = e_1.touches[0].pageX + 'px';
    slide_box.addEventListener("touchmove", function (e_2) {
      var x = e_2.touches[0].pageX;
      document.querySelector('.hover-img-bg__box').style.width = x + 'px';
    });
  });

  slide_box.onmouseup = function () {
    slide_box.onmousemove = null;
  };

  slide_box.onmouseleave = function () {
    slide_box.onmousemove = null;
  };
}

hover_bg_img();
;
;
var slider_1 = new Splide('#slider-cards_1', {
  perPage: 4,
  perMove: 1,
  arrows: false,
  type: 'loop',
  pagination: true,
  autoplay: true
}).mount();
/*____________________________________*/

var slider_2 = new Splide('#slider-cards_2', {
  perPage: 4,
  perMove: 1,
  arrows: false,
  type: 'loop',
  pagination: true,
  autoplay: true
}).mount();

function addCard(slider_splide, slider_id, pack_name, pack) {
  var slider = slider_splide;
  var slider_list = document.querySelector(slider_id).querySelector('.splide__list');
  var slider_slides = slider_list.querySelectorAll('.splide__slide');
  slider_slides.forEach(function (el) {
    return el.remove();
  });
  pack.forEach(function (el) {
    slider.add("<li class=\"splide__slide\">\n        <div class=\"card\">\n          <button class=\"flip\">\n            <svg><use xlink:href=\"./assets/icons/svg/sprite.svg#flip\"></use></svg>\n          </button>\n          <div class=\"front\">\n            <img src=\"./assets/images/".concat(pack_name, "/").concat(el.img, ".png\"/>\n          </div>\n          <div class=\"back\">\n            <img src=\"./assets/images/").concat(pack_name, "/").concat(el.img, ".png\"/>\n            <div class=\"back__block\">\n              <h5 class=\"title\">").concat(el.title, "</h5>\n              <p class=\"text scroll_1\">").concat(el.text, "</p>\n            </div>\n          </div>\n        </div>\n      </li>>"));
  });
  btn_flip();
}
/*____card_flip*/


function btn_flip() {
  var btns = document.querySelectorAll('.flip');
  btns.forEach(function (btn) {
    btn.onclick = function () {
      var card = btn.parentNode;
      card.classList.toggle('_active');
    };
  });
}

;
var team_slider = new Splide('.team', {
  perPage: 4,
  perMove: 1,
  pagination: true
}).mount();

function team_add(data) {
  var team_list = document.querySelector('.team');
  var team_el = team_list.querySelectorAll('.splide__slide');
  team_el.forEach(function (el) {
    return el.remove();
  });
  data.forEach(function (el) {
    add(el);
  });

  function add(el) {
    team_slider.add("<li class=\"splide__slide team__el\">\n        <div class=\"team__el\">\n          <div class=\"team__box\">\n            <img src=\"./assets/images/team/".concat(el.img, ".png\" class=\"img_b\"/>\n            <img src=\"./assets/images/team/").concat(el.img, "_w.png\" class=\"img_w\"/>\n            <div class=\"info\">\n              <div class=\"name\">").concat(el.name, "</div>\n              <div class=\"work\">").concat(el.work, "</div>\n              <div class=\"text scroll_1\">").concat(el.about, "</div>\n            </div>\n            <button class=\"more\"></button>\n          </div>\n        </div>\n      </li>"));
  }

  team_btns();
}

function team_btns() {
  var btns = document.querySelectorAll('.more');
  btns.forEach(function (btn) {
    btn.onclick = function () {
      btn.parentNode.classList.toggle('_active');
    };
  });
}

function remove_team(elms) {
  elms.forEach(function (el) {
    return remove();
  });
}
/*_______________req*/


var d_team = './resources/data/team.json';
sendRequest('GET', d_team).then(function (data) {
  team_add(data.team);
})["catch"](function (err) {
  return console.log(err);
});

function anchors() {
  var anchors = document.querySelectorAll("a[href*='#']");

  var _iterator = _createForOfIteratorHelper(anchors),
      _step;

  try {
    var _loop = function _loop() {
      var anchor = _step.value;
      anchor.addEventListener('click', function (event) {
        event.preventDefault();
        var blockID = anchor.getAttribute('href');
        document.querySelector('' + blockID).scrollIntoView({
          behavior: "smooth",
          block: "start"
        });
      });
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

anchors();
;
AOS.init({
  // Global settings:
  disable: false,
  // accepts following values: 'phone', 'tablet', 'mobile', boolean, expression or function
  startEvent: 'DOMContentLoaded',
  // name of the event dispatched on the document, that AOS should initialize on
  initClassName: 'aos-init',
  // class applied after initialization
  animatedClassName: 'aos-animate',
  // class applied on animation
  useClassNames: false,
  // if true, will add content of `data-aos` as classes on scroll
  disableMutationObserver: false,
  // disables automatic mutations' detections (advanced)
  debounceDelay: 50,
  // the delay on debounce used while resizing window (advanced)
  throttleDelay: 99,
  // the delay on throttle used while scrolling the page (advanced)
  // Settings that can be overridden on per-element basis, by `data-aos-*` attributes:
  offset: 120,
  // offset (in px) from the original trigger point
  delay: 0,
  // values from 0 to 3000, with step 50ms
  duration: 400,
  // values from 0 to 3000, with step 50ms
  easing: 'ease',
  // default easing for AOS animations
  once: false,
  // whether animation should happen only once - while scrolling down
  mirror: false,
  // whether elements should animate out while scrolling past them
  anchorPlacement: 'top-bottom' // defines which position of the element regarding to window should trigger the animation

});
window.addEventListener('load', AOS.refresh);

function media(slider_1, slider_2, slider_team) {
  // options;
  var large = false;
  var lar_slides = 4;
  var desktop = true;
  var d_slides = 3;
  var laptop = false;
  var l_slides = 2;
  var tablet = false;
  var t_slides = 1;
  var phone = false;
  var p_slides = 1;
  var slidesToShow = 0;
  var mediaLarge = window.matchMedia('(min-width: 1280px)');
  var mediaDesktop = window.matchMedia('(max-width: 1280px)');
  var mediaLaptop = window.matchMedia('(max-width: 1024px)');
  var mediaTablet = window.matchMedia('(max-width: 820px)');
  var mediaPhone = window.matchMedia('(max-width: 480px)');

  if (mediaLarge.matches) {
    tablet = false;
    laptop = false;
    phone = false;
    desktop = false;
    large = true;
  }

  if (mediaDesktop.matches) {
    tablet = false;
    laptop = false;
    phone = false;
    large = false;
    desktop = true;
  }

  if (mediaLaptop.matches) {
    desktop = false;
    tablet = false;
    phone = false;
    large = false;
    laptop = true;
  }

  if (mediaTablet.matches) {
    desktop = false;
    laptop = false;
    phone = false;
    large = false;
    tablet = true;
  }

  if (mediaPhone.matches) {
    tablet = false;
    laptop = false;
    desktop = false;
    large = false;
    phone = true;
  }

  if (large) {
    slidesToShow = lar_slides;
  }

  if (desktop) {
    slidesToShow = d_slides;
  }

  if (laptop) {
    slidesToShow = l_slides;
  }

  if (tablet) {
    slidesToShow = t_slides;
  }

  if (phone) {
    slidesToShow = p_slides;
  }

  slider_1.options = {
    perPage: slidesToShow
  };
  slider_2.options = {
    perPage: slidesToShow
  };
  slider_team.options = {
    perPage: slidesToShow
  };
}
/*_______________media______*/


media(slider_1, slider_2, team_slider);

window.onresize = function () {
  media(slider_1, slider_2, team_slider);
  img_w_rez();
};
/*img_bg*/


function img_w_rez() {
  var slide_box = document.querySelector('.hover-img-bg');
  var imgs = slide_box.querySelectorAll('img');
  var box_w = slide_box.clientWidth;
  imgs.forEach(function (el) {
    el.style.width = "".concat(box_w, "px");
  });
}

setInterval(function () {
  img_w_rez();
}, 500);

function myRouter() {
  var pages = {
    base: true,
    bestiary: false
  };

  var locationResolver = function locationResolver(location) {
    switch (location) {
      case "/":
        pageActive(location);
        break;

      case "#/bestiary":
        pageActive(location);
        break;
    }
  }; // hash watcher


  window.onhashchange = function () {
    setTimeout(function () {
      checkHash();
      check_bestiary();
    }, 100);
  };
  /*_________funcs_____*/


  function checkHash() {
    var location = window.location.hash;

    if (location) {
      locationResolver(location);
    }

    if (window.location.hash == "" || window.location.hash == "/") {
      var base_page = document.querySelector(".base");

      for (var item in pages) {
        var page = document.querySelector(".".concat(item));

        if (page == base_page) {
          page.classList.add('_activePage');
        } else {
          page.classList.remove('_activePage');
        }
      }
    }
  }

  checkHash();

  function pageActive(location) {
    var name = location.substr(2);
    var page_active = document.querySelector(".".concat(name));

    for (var item in pages) {
      var page = document.querySelector(".".concat(item));

      if (page == page_active) {
        page.classList.add('_activePage');
      } else {
        page.classList.remove('_activePage');
      }
    }
  }

  function check_bestiary() {
    var main = document.querySelector('.mainContent');

    if (window.location.hash == '#/bestiary') {
      main.classList.add('_page-bestiary');
    } else {
      main.classList.remove('_page-bestiary');
    }
  }

  check_bestiary();
}

myRouter();

function btns() {
  var home = document.querySelector('.page-btns_home');
  var bestiary = document.querySelector('.page-btns_bestiary');
  home.addEventListener('click', function () {
    window.location.hash = '';
  });
  bestiary.addEventListener('click', function () {
    window.location.hash = '#/bestiary';
  });
}

btns();
;

function preloading() {
  var preloader = document.querySelector('.preloading');
  /*
    preloader.classList.add('_active');
  
    window.onload = ()=>{   
      preloader.classList.remove('_active');
    }
  
    setTimeout(()=>{
      preloader.classList.remove('_active');
    }, 5000)*/
}

preloading();
;

function sendRequest(method, url) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open(method, url);
    xhr.responseType = 'json';

    xhr.onload = function () {
      if (xhr.status >= 400) {
        reject(xhr.response);
      } else {
        resolve(xhr.response);
      }
    };

    xhr.onerror = function () {
      reject(xhr.response);
    };

    xhr.send();
  });
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
