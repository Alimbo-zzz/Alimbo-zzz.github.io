"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var content = {
  /*base-page__________________*/

  /*s_intro*/
  "intro_text": {
    "en": "Welcome to Pandemonium, a world beyond the valley of the shadow of death. Lands in which there is an endless war for power. It is here that armies of fierce demons and beautiful demonettes clash under the leadership of future lords.",
    "ru": "Добро пожаловать в Пандемониум - мир, что лежит за долиной смертной тени. На этих землях развернулась бесконечная война за власть. Именно здесь армии свирепых демонов и прекрасных демонесс сражаются под предводительством будущих лордов."
  },

  /*hover_img_bg_title*/
  "hover_img_bg_title": {
    "en": "Become the Lord of the Underworld! Pandemonium are original nft cards with varying degrees of rarity, intended for collecting. Limited, unique and hot as hell.",
    "ru": "Стань лордом преисподней! Пандемониум - это оригинальные NFT-карточки разной степени редкости, предназначенные для коллекционирования. Ограниченные, уникальные и чертовски горячие."
  },

  /*s_info*/
  "s_info_grad_1": {
    "en": "JOIN OUR TELEGRAM COMMUNITY",
    "ru": "Присоединяйся к нам в  Telegram"
  },
  "s_info_grad_2": {
    "en": "You can find more information abou magical creatures in our bestiary",
    "ru": "Более подробную информацию о волшебных существах вы можете найти в нашем бестиарии"
  },
  "s_info_text_1": {
    "en": "Your time has come!",
    "ru": "Время пришло! "
  },
  "s_info_text_2": {
    "en": "Become the strongest hero of Pandemonium by subscribing to our telegram channel! News, events and special offers are waiting for you!",
    "ru": "Подпишись на наш телеграм-канал и стань сильнейшим героем Пандемониума! Тебя ждут новости, события и специальные предложения."
  },
  "s_info_text_3": {
    "en": "Naiad is the younger demoness of the rivers. It controls the movement of matter. Naiad rules from the waters of the Styx to the Great Lava Flow of the Underworld. She loves good jokes. Attention! Beauty Naiad can burn you with one glance  This beauty can burn you with one glance.",
    "ru": "Наяды – младшие демонессы рек. Они контролируют движение материи. Наяды правят от вод Стикса до Великого Лавого Потока Преисподней. Они любят хорошие шутки. ОСТОРОЖНО! Красавицы Наяды может испепелить тебя одним взглядом."
  },
  "s_info_title_1": {
    "en": "This is just the beginning. We're releasing the first batch of our limited edition cards with Pretty Naiad.",
    "ru": "Это только начало. Мы выпускаем первую партию лимитированной коллекции карточек с прекрасными наядами."
  },

  /*s_cards*/
  "s_card_title_1": {
    "en": "1st pack",
    "ru": "Первый пак"
  },
  "s_card_title_2": {
    "en": "2d pack",
    "ru": "Второй пак"
  },

  /*s_team*/
  "s_team_title": {
    "en": "Our team",
    "ru": "команда"
  },

  /*s_about*/
  "s_about_title_1": {
    "en": "About us",
    "ru": "О нас"
  },
  "s_about_title_2": {
    "en": "Our story",
    "ru": "Наша история"
  },
  "s_about_title_3": {
    "en": "Our mission",
    "ru": "Наша миссия"
  },
  "s_about_text_1": {
    "en": "We are a young team united by common interests and game development, with rich experience in the mobile market. Our project is a fantasy meta–universe with references to things we all love, bulit on a blockchain system using original NFT cards.",
    "ru": "Мы – молодая команда, объединяющая общими интересами и деятельностью в сфере разработки игр, с богатым опытом работы на мобильном рынке. Наш проект – это фэнтезийная мета – вселенная с отсылками к вещам, которые мы все любим, построенная на блокчейн-системе с использованием оригинальных NFT-карт."
  },
  "s_about_text_2": {
    "en": "In June 2021, a group of programmers and designers already working on mobile games turn their eyes on the blockchain system. It turned out that all of us bought NFT cards for collectible or blockchain games. Games cannot develop without technology, and technology is well promoted through games. We have all the potential to create new interesting products with the lastest technology.",
    "ru": "В июне 2021 года группа программистов и дизайнеров, уже работавшая над мобильными играми, обратила свой взор на блокчейн, коллекций или блокчейн-игр. Игры не могут развиваться без технологий, а технологии хорошо продвигаются через игры. У нас есть все возможности для создания новых интересных продуктов с использованием новейших технологий."
  },
  "s_about_text_3": {
    "en": "The priority for us is to use and popularize modern technologies and create games. We believe that the blockchain system is the future.",
    "ru": "Приоритетом для наc является использование и популяризация современных технологий и создание игр. Мы верим, что за системой блокчейн – будущее."
  },

  /*bestiary-page_____________________*/
  "bestiary_main_title": {
    "en": "WELCOME TO THE PANEDONIUM BESTIARY",
    "ru": "Добро пожаловать в бестиарий Пандемониума"
  },
  "pack_1_title": {
    "en": "MERMAID NAIADS",
    "ru": "Русалки–Наяды"
  },
  "pack_2_title": {
    "en": "Nymph",
    "ru": "Малые Наяды"
  },

  /*lore-page____________*/
  "lore-main_title": {
    "en": "Welcome to Pandemonium, a world beyond the valley of the shadow of death. Lands in which there is an endless war for power. It is here that armies of fierce demons and beautiful demonettes clash under the leadership of future lords.",
    "ru": "Добро пожаловать в Пандемониум - мир, что лежит за долиной смертной тени.На этих землях развернулась бесконечная война за власть. Именно здесь армии свирепых демонов и прекрасных демонесс сражаются под предводительством будущих лордов."
  },
  "lore-about_title": {
    "en": "Dear traveler,",
    "ru": "Дорогой путешественник,"
  },
  "lore-about_text": {
    "en": "I do not know who you got this map from and for how much, but remember that you now hold an incredibly rare artefact. Please, keep it safe. <br/> I’ve spent more than ten years working on it and I’ve marked all the villages and astral cities that I’ve ever been to. <br/> Now, the first Pandemonium plan is ready for your personal discoveries. Its future holders are sure to learn about them. <br/> P.S. if you are thinking that you're dealing with an ordinary piece of paper, you're incredibly mistaken <br/>Respectfully, hundering Manrock, wizard and cartographer. ",
    "ru": "не знаю от кого и за сколько ты получил эту карту. Однако помни, что теперь в твоих руках находится невероятно редкий артефакт. Пожалуйста, защити его.<br/>Я работал над этой картой больше десятка лет, и отметил на ней все деревни и астральные города, которые повстречал.<br/>Теперь первый план Пандемониума готов для твоих личных открытий. О них обязательно узнают следующие владельцы карты.<br/>P.S. если ты считаешь, что имеешь дело с обычным куском бумаги, то невероятно ошибаешься.<br/>С уважением, Громогласный Манрок, волшебник и картограф"
  },
  "lore-last_title": {
    "en": "You can learn about the creatures that live in the world of Pandemonium from our Bestiary",
    "ru": "О СУЩЕСТВАХ, КОТОРЫЕ ОБИТАЮТ В МИРЕ ПАНДЕМОНИУМА, ВЫ МОЖЕТЕ УЗНАТЬ ИЗ НАШЕГО БЕСТИАРИЯ"
  },

  /*btns*/
  "btn_ah": {
    "en": "Find us on atomichub",
    "ru": "Найди нас на atomichub"
  },
  "btn_bot": {
    "en": "Pandemonium bot",
    "ru": "Pandemonium бот"
  },
  "btn_bestiary": {
    "en": "Bestiary",
    "ru": "Бестиарий"
  },
  "btn_team": {
    "en": "Team",
    "ru": "Команда"
  },
  "btn_about": {
    "en": "About",
    "ru": "О нас"
  },
  "btn_home": {
    "en": "Home",
    "ru": "Главная"
  },
  "btn_lore": {
    "en": "Lore",
    "ru": "Лор"
  },
  "btn_nav": {
    "en": "Navigation",
    "ru": "Навигация"
  },
  "btn_lore_home": {
    "en": "To the main",
    "ru": "На главную"
  }
};

function addBestiary_pack(pack, pack_name, list_id) {
  var list = document.querySelector(list_id);
  var elems = list.querySelectorAll('li');
  var _lang = '';
  f_check_lang();
  elems.forEach(function (el) {
    return el.remove();
  });
  pack.forEach(function (el, i) {
    var HTML = '';
    var first = "<li class=\"bestiary-list__el\">\n    <div class=\"bestiary-list__block\">\n      <img src=\"./assets/images/".concat(pack_name, "/").concat(el.img, ".png\"> \n      <div class=\"bestiary-list__box\">");
    var title = '<h3 class="title">no name</h3>';

    if (el[_lang].bestiary.title === "" || !el[_lang].bestiary.title) {
      title = "<h3 class=\"title\">".concat(el[_lang].title, "</h3>");
    } else {
      title = "<h3 class=\"title\">".concat(el[_lang].bestiary.title, "</h3>");
    }

    var end = "\n      <p class=\"text scroll_1\">".concat(el[_lang].bestiary.text, "</p>\n      </div>\n    </div>\n    <div class=\"hr\"></div>\n    </li>");
    HTML = first + title + end;
    list.insertAdjacentHTML('beforeEnd', HTML);
  });

  function f_check_lang() {
    var ls = window.localStorage;

    if (!ls.pandemonium_lang) {
      ls.setItem('pandemonium_lang', 'en');
      _lang = ls.pandemonium_lang;
    } else {
      _lang = ls.pandemonium_lang;
    }
  }
}

;

function add_lore_zone() {
  var list = document.querySelector('.lore-history__list');
  var old_zones = list.querySelectorAll('li');
  var zones = data_lore.lore;
  var lang = window.localStorage.pandemonium_lang;
  old_zones.forEach(function (el) {
    return el.remove();
  });
  zones.forEach(function (el, i) {
    var html = '';
    var first = "<li class=\"lore-history__el\" id=\"".concat(el.id, "\">\n\t\t\t<h3 class=\"title _grad\">").concat(el[lang].title, "</h3>\n\t\t\t<div class=\"lore-history__block\">\n\t\t\t\t<img src=\"./assets/images/map/").concat(el.img, ".png\">\t");
    var text = '';
    var placeholder = '';
    el[lang].text.forEach(function (p) {
      return text += "<p class=\"lore-text\">".concat(p, "</p>");
    });

    if (el[lang].placeholder) {
      placeholder = "<p class=\"lore-placeholder\">".concat(el[lang].placeholder, "</p>");
    }

    var end = "\n\t\t\t</div>\n\t\t</li>";
    html = first + text + placeholder + end;
    list.insertAdjacentHTML('beforeEnd', html);
  });
}

;

function dark_theme() {
  var main_cont = document.querySelector('.mainContent');
  var logo = document.querySelector('.btn-theme');

  logo.onclick = function () {
    check_theme();
  };

  function check_theme() {
    if (logo.classList.contains('_active')) {
      main_cont.classList.remove('_dark');
      logo.classList.remove('_active');
    } else {
      main_cont.classList.add('_dark');
      logo.classList.add('_active');
    }
  }

  check_theme();
}

dark_theme();
;
/*_______src________req*/

var d_pack_1 = './resources/data/pack_1.json';
var d_pack_2 = './resources/data/pack_2.json';
var d_roadmap = './resources/data/roadmap.json';
var d_team = './resources/data/team.json';
var d_lore = './resources/data/lore.json';
/*______data_vars__________*/

var data_pack_1 = null;
var data_pack_2 = null;
var data_roadmap = null;
var data_team = null;
var data_lore = null;
/*_______main_vars_______*/

var m_pack_1 = undefined;
var m_pack_2 = undefined;
var m_roadmap = undefined;
var m_team = undefined;
/*lore*/

var m_lore = undefined;
/*bestiary*/

var m_bestiary_pack_1 = undefined;
var m_bestiary_pack_2 = undefined;
sendRequest('GET', d_pack_1).then(function (data) {
  data_pack_1 = data;
  addCard(slider_1, '#slider-cards_1', 'pack_1', data.pack_1);
  addBestiary_pack(data.pack_1, 'pack_1', '#bestiary-pack_1');
}).then(function (e) {
  var sec = document.querySelector('#slider-cards_1');
  m_pack_1 = sec.querySelectorAll('li');
  /*bestiary*/

  var bestiary_list = document.querySelector('#bestiary-pack_1');
  m_bestiary_pack_1 = bestiary_list;
})["catch"](function (err) {
  return console.log(err);
});
sendRequest('GET', d_pack_2).then(function (data) {
  data_pack_2 = data;
  addCard(slider_2, '#slider-cards_2', 'pack_2', data.pack_2);
  addBestiary_pack(data.pack_2, 'pack_2', '#bestiary-pack_2');
}).then(function (e) {
  var sec = document.querySelector('#slider-cards_2');
  m_pack_2 = sec.querySelectorAll('li');
  /*bestiary*/

  var bestiary_list = document.querySelector('#bestiary-pack_2');
  m_bestiary_pack_2 = bestiary_list;
})["catch"](function (err) {
  return console.log(err);
});
sendRequest('GET', d_roadmap).then(function (data) {
  data_roadmap = data;
  add_roadmap();
}).then(function (e) {
  var sec = document.querySelector('#s_roadmap');
  m_roadmap = sec.querySelectorAll('.road');
})["catch"](function (err) {
  return console.log(err);
});
sendRequest('GET', d_team).then(function (data) {
  data_team = data;
  team_add(data.team);
}).then(function (e) {
  var sec = document.querySelector('#s_team');
  m_team = sec.querySelectorAll('.splide__slide');
})["catch"](function (err) {
  return console.log(err);
});
sendRequest('GET', d_lore).then(function (data) {
  data_lore = data;
  add_lore_zone();
}).then(function (e) {
  var sec = document.querySelector('.lore-history');
  m_lore = sec.querySelectorAll('li');
})["catch"](function (err) {
  return console.log(err);
});

function hamburger() {
  var hamburger = document.querySelector('.hamburger');
  var hamburger_menu = document.querySelector('.header__block');
  var link_elems = document.querySelectorAll('.nav__link');
  var header = document.querySelector('.header');
  var body = document.querySelector('body');
  var preloader = document.querySelector('.preloading');

  hamburger.onclick = function () {
    hamburger.classList.toggle('_active');
  };

  setInterval(function () {
    if (preloader.classList.contains('_active')) {
      body.style.overflow = 'hidden';
    } else if (hamburger.classList.contains("_active")) {
      header.classList.add('header-bg-none');
      hamburger_menu.classList.add('hamburger-menu_active');
      body.style.overflow = 'hidden';
    } else {
      header.classList.remove('header-bg-none');
      hamburger_menu.classList.remove('hamburger-menu_active');
      body.style.overflow = 'auto';
    }
  }, 100);
  link_elems.forEach(function (item, i) {
    item.onclick = function () {
      hamburger.classList.remove("_active");
      window.location.hash = '';
    };
  });
}

hamburger();
;

function header_fix() {
  var header = document.querySelector('.header');

  document.onscroll = function () {
    showHeader();
  };

  function showHeader() {
    if (window.pageYOffset > 200) {
      header.classList.add('header_fixed');
    } else {
      header.classList.remove('header_fixed');
    }
  }
}

header_fix();
;

function hover_bg_img() {
  var slide_box = document.querySelector('.hover-img-bg');

  slide_box.onmousedown = function () {
    slide_box.onmousemove = function (e) {
      var x = e.offsetX;
      document.querySelector('.hover-img-bg__box').style.width = x + 'px';
    };
  };

  slide_box.addEventListener("touchstart", function (e_1) {
    document.querySelector('.hover-img-bg__box').style.width = e_1.touches[0].pageX + 'px';
    slide_box.addEventListener("touchmove", function (e_2) {
      var x = e_2.touches[0].pageX;
      document.querySelector('.hover-img-bg__box').style.width = x + 'px';
    });
  });

  slide_box.onmouseup = function () {
    slide_box.onmousemove = null;
  };

  slide_box.onmouseleave = function () {
    slide_box.onmousemove = null;
  };
}

hover_bg_img();
;
;

function localization() {
  var ls = window.localStorage;

  if (!ls.pandemonium_lang) {
    ls.setItem('pandemonium_lang', 'en');
    check_lang();
  } else {
    check_lang();
  }

  function check_lang() {
    var _lang = ls.pandemonium_lang;

    var _loop = function _loop(key) {
      var elems = document.querySelectorAll(".lng-".concat(key));
      elems.forEach(function (el) {
        if (el && content[key][_lang]) el.innerHTML = content[key][_lang];else console.log('err', content[key]);
      });
    };

    for (var key in content) {
      _loop(key);
    }

    lng_roadmap(_lang);
    lng_packs(_lang);
    lng_team(_lang);
    lng_bestiary(_lang);
    lng_lore(_lang);
    lng_map_zone(_lang);
  }
  /*_________funcs______________*/


  function lng_roadmap(lang) {
    if (m_roadmap) {
      var roads = m_roadmap;
      var data = data_roadmap.roadmap;
      roads.forEach(function (road, i) {
        var road_date = road.querySelector('.date');
        var road_name = road.querySelector('.name');
        var road_list = road.querySelectorAll('li');

        if (data[i]) {
          road_date.textContent = data[i][lang].date;
          road_name.textContent = data[i][lang].title;
          road_list.forEach(function (el, index) {
            return el.textContent = data[i][lang].list[index];
          });
        }
      });
    }
  }

  function lng_packs(lang) {
    if (m_pack_1 && m_pack_2) {
      var add_lang = function add_lang(info) {
        info.dom.forEach(function (el, i) {
          var title = el.querySelector('.title');
          var text = el.querySelector('.text');

          if (info.data[i]) {
            title.textContent = info.data[i][lang].title;
            text.textContent = info.data[i][lang].text;
          }
        });
      };

      var packs = [{
        dom: m_pack_1,
        data: data_pack_1.pack_1
      }, {
        dom: m_pack_2,
        data: data_pack_2.pack_2
      }];
      packs.forEach(function (el) {
        return add_lang(el);
      });
      slider_1.refresh();
      slider_2.refresh();
    }
  }

  function lng_team(lang) {
    if (m_team) {
      var team = m_team;
      var data = data_team.team;
      team.forEach(function (el, i) {
        var name = el.querySelector('.name');
        var work = el.querySelector('.work');
        var text = el.querySelector('.text');

        if (data[i]) {
          name.textContent = data[i][lang].name;
          work.textContent = data[i][lang].work;
          text.innerHTML = data[i][lang].about;
        }
      });
    }
  }

  function lng_bestiary(lang) {
    if (m_bestiary_pack_1 && m_bestiary_pack_2) {
      var add_lang = function add_lang(info) {
        var list = info.dom.querySelectorAll('li');
        list.forEach(function (el, i) {
          var title = el.querySelector('.title');
          var text = el.querySelector('.text');

          if (info.data[i]) {
            var data = info.data[i][lang];
            text.innerHTML = data.bestiary.text;

            if (!data.bestiary.title || data.bestiary.title === "") {
              title.textContent = data.title;
            } else title.textContent = data.bestiary.title;
          }
        });
      };

      var packs = [{
        dom: m_bestiary_pack_1,
        data: data_pack_1.pack_1
      }, {
        dom: m_bestiary_pack_2,
        data: data_pack_2.pack_2
      }];
      packs.forEach(function (el) {
        return add_lang(el);
      });
    }
  }

  function lng_lore(lang) {
    if (m_lore) {
      var lore = m_lore;
      var data = data_lore.lore;
      lore.forEach(function (el, i) {
        var title = el.querySelector('.title');
        var placeholder = el.querySelector('.lore-placeholder');
        var text_all = el.querySelectorAll('.lore-text');
        title.textContent = data[i][lang].title;

        if (placeholder && data[i][lang].placeholder) {
          placeholder.textContent = data[i][lang].placeholder;
        }

        text_all.forEach(function (p, idx) {
          var text = data[i][lang].text[idx];
          if (text) p.textContent = text;
        });
      });
    }
  }

  function lng_map_zone() {
    if (data_lore) {
      var lang = window.localStorage.pandemonium_lang;
      var name_zones = document.querySelectorAll('.map-zone__name');
      name_zones.forEach(function (el, i) {
        el.textContent = data_lore.lore[i][lang].title;
      });
    }
  }
  /*________btns____*/


  function localization_btns() {
    var btns = document.querySelectorAll('.lng-btn');
    var select = document.querySelector('.btns-lang__select');

    select.onclick = function () {
      select.parentNode.classList.toggle('_active');
    };

    btns.forEach(function (el) {
      el.onclick = function () {
        ls.pandemonium_lang = el.dataset.lang; //location.reload();

        check_lang();
        select.parentNode.classList.remove('_active');
        flag();
      };
    });

    function flag() {
      var svg = select.querySelector('use');
      var src = svg.getAttribute('xlink:href');
      src = src.substr(0, src.length - 2);
      src += ls.pandemonium_lang;
      svg.setAttribute('xlink:href', src);
    }

    flag();
  }

  localization_btns();
}

localization();
setTimeout(localization, 5000);
;

function map() {
  var map = document.querySelector('.map');
  var zones = map.querySelectorAll('.map-zone__el');
  var images = map.querySelectorAll('img._fix');
  zones.forEach(function (el, i) {
    var point = el.parentNode.parentNode.querySelector(".map-points__point._".concat(i + 1));

    point.onclick = function (e) {
      if (data_lore) map_modal(data_lore.lore[i].id, e);
    };

    if (window.innerWidth > 800) {
      el.onmouseover = function () {
        return add_class(el, i);
      };

      el.onmouseout = function () {
        return remove_class(el, i);
      };

      add_names_zone(el, i);

      el.onclick = function (e) {
        if (data_lore) map_modal(data_lore.lore[i].id, e);
      };
    } else {
      el.ontouchstart = function () {
        return add_class(el, i);
      };

      el.ontouchend = function () {
        return remove_class(el, i);
      };
    }
  });

  function add_class(item, index) {
    images[index].classList.add('_active');
    item.classList.add('_active');
    return false;
  }

  function remove_class(item, index) {
    images.forEach(function (el) {
      return el.classList.remove('_active');
    });
    item.classList.remove('_active');
    return false;
  }

  function add_names_zone(el, i) {
    var check_lore_get = setInterval(function () {
      if (data_lore) {
        var lang = window.localStorage.pandemonium_lang;
        var name = el.querySelector('.map-zone__name');
        name.textContent = data_lore.lore[i][lang].title;
        clearInterval(check_lore_get);
      }
    }, 100);
  }
}

map();

function map_modal(id, event) {
  if (id) {
    var modal = document.querySelector('.map-modal');
    var overlay = modal.querySelector('.map-modal__overlay');
    var btn = modal.querySelector('.btn-more');
    var remove_btn = modal.querySelector('.remove');

    remove_btn.onclick = function () {
      modal.classList.remove('_active');
    };

    var lang = window.localStorage.pandemonium_lang;
    var m_title = modal.querySelector('.title');
    var m_text = modal.querySelector('.lore-text');
    var title = '';
    var text = '';
    data_lore.lore.forEach(function (el) {
      if (el.id == id) {
        title = el[lang].title;
        text = el[lang].text[0];
      }
    });
    m_title.textContent = title;
    m_text.textContent = text;
    modal.classList.add('_active');

    btn.onclick = function (e) {
      modal.classList.remove('_active');
      var all_h = document.querySelector('.lore').offsetHeight;
      var pos_1 = event.pageY;
      var pos_2 = document.querySelector("#".concat(id)).offsetTop;
      var center = event.clientY - window.innerHeight / 2;
      var up = window.innerHeight * 36 / 100;
      var scroll = pos_2 - pos_1 + center + up;
      window.scrollBy({
        top: scroll,
        left: 0,
        behavior: "smooth"
      });
    };

    overlay.onclick = function () {
      modal.classList.remove('_active');
    };
  }
}

;
var slider_1 = new Splide('#slider-cards_1', {
  perPage: 4,
  perMove: 1,
  arrows: false,
  type: 'loop',
  pagination: true,
  autoplay: true
}).mount();
/*____________________________________*/

var slider_2 = new Splide('#slider-cards_2', {
  perPage: 4,
  perMove: 1,
  arrows: false,
  type: 'loop',
  pagination: true,
  autoplay: true
}).mount();

function addCard(slider_splide, slider_id, pack_name, pack) {
  var slider = slider_splide;
  var slider_list = document.querySelector(slider_id).querySelector('.splide__list');
  var slider_slides = slider_list.querySelectorAll('.splide__slide');
  slider_slides.forEach(function (el) {
    return el.remove();
  });
  var _lang = '';
  f_check_lang();
  pack.forEach(function (el) {
    slider.add("<li class=\"splide__slide\">\n        <div class=\"card\">\n          <button class=\"flip\">\n            <svg><use xlink:href=\"./assets/icons/svg/sprite.svg#flip\"></use></svg>\n          </button>\n          <div class=\"front\">\n            <img src=\"./assets/images/".concat(pack_name, "/").concat(el.img, ".png\"/>\n          </div>\n          <div class=\"back\">\n            <img src=\"./assets/images/").concat(pack_name, "/").concat(el.img, ".png\"/>\n            <div class=\"back__block\">\n              <h5 class=\"title\">").concat(el[_lang].title, "</h5>\n              <p class=\"text scroll_1\">").concat(el[_lang].text, "</p>\n            </div>\n          </div>\n        </div>\n      </li>>"));
  });
  btn_flip();

  function f_check_lang() {
    var ls = window.localStorage;

    if (!ls.pandemonium_lang) {
      ls.setItem('pandemonium_lang', 'en');
      _lang = ls.pandemonium_lang;
    } else {
      _lang = ls.pandemonium_lang;
    }
  }
}
/*____card_flip*/


function btn_flip() {
  var btns = document.querySelectorAll('.flip');
  btns.forEach(function (btn) {
    btn.onclick = function () {
      var card = btn.parentNode;
      card.classList.toggle('_active');
    };
  });
}

;

function add_roadmap() {
  var roadmap_cont = document.querySelector('#roadmap_cont');
  var _lang = '';
  f_check_lang();
  data_roadmap.roadmap.forEach(function (el, i) {
    var html = '';
    var first = "<div class=\"road\" data-aos>\n\t\t\t<div class=\"road__block\">\n\t\t\t\t<h3 class=\"date\">".concat(el[_lang].date, "</h3>\n\t\t\t\t<h5 class=\"name\">").concat(el[_lang].title, "</h5>\n\t\t\t\t<ul class=\"road__list\">");
    var list = '';
    var end = "</ul>\n\t\t\t</div>\n\t\t\t<div class=\"point\" style=\"background: linear-gradient(125deg, ".concat(el.colors._1, " 0%, ").concat(el.colors._2, " 100%);\">\n\t\t\t\t<svg><use xlink:href=\"./assets/icons/svg/sprite.svg#arrows\"></use></svg>\n\t\t\t</div>\n\t\t</div>");
    if (el[_lang].list) el[_lang].list.forEach(function (item) {
      return list += "<li class=\"road__el\">".concat(item, "</li>");
    });
    html = first + list + end;
    roadmap_cont.insertAdjacentHTML('beforeEnd', html);
  });

  function f_check_lang() {
    var ls = window.localStorage;

    if (!ls.pandemonium_lang) {
      ls.setItem('pandemonium_lang', 'en');
      _lang = ls.pandemonium_lang;
    } else {
      _lang = ls.pandemonium_lang;
    }
  }

  AOS.refresh;
}

;
var team_slider = new Splide('.team', {
  perPage: 4,
  perMove: 1,
  pagination: true
}).mount();

function team_add(data) {
  var team_list = document.querySelector('.team');
  var team_el = team_list.querySelectorAll('.splide__slide');
  var _lang = '';
  f_check_lang();
  team_el.forEach(function (el) {
    return el.remove();
  });
  data.forEach(function (el) {
    add(el);
  });

  function add(el) {
    team_slider.add("<li class=\"splide__slide team__el\">\n        <div class=\"team__el\">\n          <div class=\"team__box\">\n            <img src=\"./assets/images/team/".concat(el.img, ".png\" class=\"img_b\"/>\n            <img src=\"./assets/images/team/").concat(el.img, "_w.png\" class=\"img_w\"/>\n            <div class=\"info\">\n              <div class=\"name\">").concat(el[_lang].name, "</div>\n              <div class=\"work\">").concat(el[_lang].work, "</div>\n              <div class=\"text scroll_1\">").concat(el[_lang].about, "</div>\n            </div>\n            <button class=\"more\"></button>\n          </div>\n        </div>\n      </li>"));
  }

  team_btns();

  function f_check_lang() {
    var ls = window.localStorage;

    if (!ls.pandemonium_lang) {
      ls.setItem('pandemonium_lang', 'en');
      _lang = ls.pandemonium_lang;
    } else {
      _lang = ls.pandemonium_lang;
    }
  }
}

function team_btns() {
  var btns = document.querySelectorAll('.more');
  btns.forEach(function (btn) {
    btn.onclick = function () {
      btn.parentNode.classList.toggle('_active');
    };
  });
}

function remove_team(elms) {
  elms.forEach(function (el) {
    return remove();
  });
}

;

function anchors() {
  var anchors = document.querySelectorAll("a[href*='#']");

  var _iterator = _createForOfIteratorHelper(anchors),
      _step;

  try {
    var _loop2 = function _loop2() {
      var anchor = _step.value;
      anchor.addEventListener('click', function (event) {
        event.preventDefault();
        var blockID = anchor.getAttribute('href');
        document.querySelector('' + blockID).scrollIntoView({
          behavior: "smooth",
          block: "start"
        });
      });
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop2();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

anchors();
;
AOS.init({
  // Global settings:
  disable: false,
  // accepts following values: 'phone', 'tablet', 'mobile', boolean, expression or function
  startEvent: 'DOMContentLoaded',
  // name of the event dispatched on the document, that AOS should initialize on
  initClassName: 'aos-init',
  // class applied after initialization
  animatedClassName: 'aos-animate',
  // class applied on animation
  useClassNames: false,
  // if true, will add content of `data-aos` as classes on scroll
  disableMutationObserver: false,
  // disables automatic mutations' detections (advanced)
  debounceDelay: 50,
  // the delay on debounce used while resizing window (advanced)
  throttleDelay: 99,
  // the delay on throttle used while scrolling the page (advanced)
  // Settings that can be overridden on per-element basis, by `data-aos-*` attributes:
  offset: 120,
  // offset (in px) from the original trigger point
  delay: 0,
  // values from 0 to 3000, with step 50ms
  duration: 400,
  // values from 0 to 3000, with step 50ms
  easing: 'ease',
  // default easing for AOS animations
  once: false,
  // whether animation should happen only once - while scrolling down
  mirror: false,
  // whether elements should animate out while scrolling past them
  anchorPlacement: 'top-bottom' // defines which position of the element regarding to window should trigger the animation

});
window.addEventListener('load', AOS.refresh);

function media(slider_1, slider_2, slider_team) {
  // options;
  var large = false;
  var lar_slides = 4;
  var desktop = true;
  var d_slides = 3;
  var laptop = false;
  var l_slides = 2;
  var tablet = false;
  var t_slides = 1;
  var phone = false;
  var p_slides = 1;
  var slidesToShow = 0;
  var mediaLarge = window.matchMedia('(min-width: 1280px)');
  var mediaDesktop = window.matchMedia('(max-width: 1280px)');
  var mediaLaptop = window.matchMedia('(max-width: 1024px)');
  var mediaTablet = window.matchMedia('(max-width: 820px)');
  var mediaPhone = window.matchMedia('(max-width: 480px)');

  if (mediaLarge.matches) {
    tablet = false;
    laptop = false;
    phone = false;
    desktop = false;
    large = true;
  }

  if (mediaDesktop.matches) {
    tablet = false;
    laptop = false;
    phone = false;
    large = false;
    desktop = true;
  }

  if (mediaLaptop.matches) {
    desktop = false;
    tablet = false;
    phone = false;
    large = false;
    laptop = true;
  }

  if (mediaTablet.matches) {
    desktop = false;
    laptop = false;
    phone = false;
    large = false;
    tablet = true;
  }

  if (mediaPhone.matches) {
    tablet = false;
    laptop = false;
    desktop = false;
    large = false;
    phone = true;
  }

  if (large) {
    slidesToShow = lar_slides;
  }

  if (desktop) {
    slidesToShow = d_slides;
  }

  if (laptop) {
    slidesToShow = l_slides;
  }

  if (tablet) {
    slidesToShow = t_slides;
  }

  if (phone) {
    slidesToShow = p_slides;
  }

  slider_1.options = {
    perPage: slidesToShow
  };
  slider_2.options = {
    perPage: slidesToShow
  };
  slider_team.options = {
    perPage: slidesToShow
  };
}
/*_______________media______*/


media(slider_1, slider_2, team_slider);

window.onresize = function () {
  media(slider_1, slider_2, team_slider);
  img_w_rez();
};
/*img_bg*/


function img_w_rez() {
  var slide_box = document.querySelector('.hover-img-bg');
  var imgs = slide_box.querySelectorAll('img');
  var box_w = slide_box.clientWidth;
  imgs.forEach(function (el) {
    el.style.width = "".concat(box_w, "px");
  });
}

setInterval(function () {
  img_w_rez();
}, 500);

function myRouter() {
  var pages = {
    base: true,
    bestiary: false,
    lore: false
  };

  var locationResolver = function locationResolver(location) {
    switch (location) {
      case "/":
        pageActive(location);
        break;

      case "#/bestiary":
        pageActive(location);
        break;

      case "#/lore":
        pageActive(location);
        break;
    }
  }; // hash watcher


  window.onhashchange = function () {
    setTimeout(function () {
      checkHash();
      check_bestiary();
      check_lore();
    }, 100);
  };
  /*_________funcs_____*/


  function checkHash() {
    var location = window.location.hash;

    if (location) {
      locationResolver(location);
    }

    if (window.location.hash == "" || window.location.hash == "/") {
      var base_page = document.querySelector(".base");

      for (var item in pages) {
        var page = document.querySelector(".".concat(item));

        if (page == base_page) {
          page.classList.add('_activePage');
        } else {
          page.classList.remove('_activePage');
        }
      }
    }
  }

  checkHash();

  function pageActive(location) {
    var name = location.substr(2);
    var page_active = document.querySelector(".".concat(name));

    for (var item in pages) {
      var page = document.querySelector(".".concat(item));

      if (page == page_active) {
        page.classList.add('_activePage');
      } else {
        page.classList.remove('_activePage');
      }
    }
  }

  function check_bestiary() {
    var main = document.querySelector('.mainContent');

    if (window.location.hash == '#/bestiary') {
      main.classList.add('_page-bestiary');
    } else {
      main.classList.remove('_page-bestiary');
    }
  }

  check_bestiary();

  function check_lore() {
    var main = document.querySelector('.mainContent');

    if (window.location.hash == '#/lore') {
      main.classList.add('_page-lore');
    } else {
      main.classList.remove('_page-lore');
    }
  }

  check_lore();
}

myRouter();

function btns() {
  var home = document.querySelectorAll('.page-btns_home');
  var bestiary = document.querySelectorAll('.page-btns_bestiary');
  var lore = document.querySelectorAll('.page-btns_lore');
  home.forEach(function (el) {
    return el.addEventListener('click', function () {
      window.location.hash = '';
    });
  });
  bestiary.forEach(function (el) {
    return el.addEventListener('click', function () {
      window.location.hash = '#/bestiary';
    });
  });
  lore.forEach(function (el) {
    return el.addEventListener('click', function () {
      window.location.hash = '#/lore';
    });
  });
}

btns();
;

function preloading() {
  var preloader = document.querySelector('.preloading');
  preloader.classList.add('_active');
  setTimeout(function () {
    preloader.classList.remove('_active');
  }, 4000);
}

preloading();
;

function sendRequest(method, url) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open(method, url);
    xhr.responseType = 'json';

    xhr.onload = function () {
      if (xhr.status >= 400) {
        reject(xhr.response);
      } else {
        resolve(xhr.response);
      }
    };

    xhr.onerror = function () {
      reject(xhr.response);
    };

    xhr.send();
  });
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJibG9ja3MvYWRkQmVzdGlhcnlfcGFja3MuanMiLCJibG9ja3MvYWRkX2xvcmVfem9uZS5qcyIsImJsb2Nrcy9kYXJrX3RoZW1lLmpzIiwiYmxvY2tzL0dFVF9SRVEuanMiLCJibG9ja3MvaGFtYnVyZ2VyLmpzIiwiYmxvY2tzL2hlYWRlci5qcyIsImJsb2Nrcy9ob3Zlcl9iZ19pbWcuanMiLCJibG9ja3MvbG9jYWxpemF0aW9uLmpzIiwiYmxvY2tzL21hcC5qcyIsImJsb2Nrcy9zX2NhcmRzLmpzIiwiYmxvY2tzL3Nfcm9hZG1hcC5qcyIsImJsb2Nrcy9zX3RlYW0uanMiLCJibG9ja3MvdGVtcGxhdGVzL2FuY2hvcnMuanMiLCJibG9ja3MvdGVtcGxhdGVzL2Fvcy5qcyIsImJsb2Nrcy90ZW1wbGF0ZXMvbWVkaWEuanMiLCJibG9ja3MvdGVtcGxhdGVzL215Um91dGVyLmpzIiwiYmxvY2tzL3RlbXBsYXRlcy9wcmVsb2FkaW5nLmpzIiwiYmxvY2tzL3RlbXBsYXRlcy9yZXEuanMiXSwibmFtZXMiOlsiY29udGVudCIsImFkZEJlc3RpYXJ5X3BhY2siLCJwYWNrIiwicGFja19uYW1lIiwibGlzdF9pZCIsImxpc3QiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJlbGVtcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfbGFuZyIsImZfY2hlY2tfbGFuZyIsImZvckVhY2giLCJlbCIsInJlbW92ZSIsImkiLCJIVE1MIiwiZmlyc3QiLCJpbWciLCJ0aXRsZSIsImJlc3RpYXJ5IiwiZW5kIiwidGV4dCIsImluc2VydEFkamFjZW50SFRNTCIsImxzIiwid2luZG93IiwibG9jYWxTdG9yYWdlIiwicGFuZGVtb25pdW1fbGFuZyIsInNldEl0ZW0iLCJhZGRfbG9yZV96b25lIiwib2xkX3pvbmVzIiwiem9uZXMiLCJkYXRhX2xvcmUiLCJsb3JlIiwibGFuZyIsImh0bWwiLCJpZCIsInBsYWNlaG9sZGVyIiwicCIsImRhcmtfdGhlbWUiLCJtYWluX2NvbnQiLCJsb2dvIiwib25jbGljayIsImNoZWNrX3RoZW1lIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJhZGQiLCJkX3BhY2tfMSIsImRfcGFja18yIiwiZF9yb2FkbWFwIiwiZF90ZWFtIiwiZF9sb3JlIiwiZGF0YV9wYWNrXzEiLCJkYXRhX3BhY2tfMiIsImRhdGFfcm9hZG1hcCIsImRhdGFfdGVhbSIsIm1fcGFja18xIiwidW5kZWZpbmVkIiwibV9wYWNrXzIiLCJtX3JvYWRtYXAiLCJtX3RlYW0iLCJtX2xvcmUiLCJtX2Jlc3RpYXJ5X3BhY2tfMSIsIm1fYmVzdGlhcnlfcGFja18yIiwic2VuZFJlcXVlc3QiLCJ0aGVuIiwiZGF0YSIsImFkZENhcmQiLCJzbGlkZXJfMSIsInBhY2tfMSIsImUiLCJzZWMiLCJiZXN0aWFyeV9saXN0IiwiZXJyIiwiY29uc29sZSIsImxvZyIsInNsaWRlcl8yIiwicGFja18yIiwiYWRkX3JvYWRtYXAiLCJ0ZWFtX2FkZCIsInRlYW0iLCJoYW1idXJnZXIiLCJoYW1idXJnZXJfbWVudSIsImxpbmtfZWxlbXMiLCJoZWFkZXIiLCJib2R5IiwicHJlbG9hZGVyIiwidG9nZ2xlIiwic2V0SW50ZXJ2YWwiLCJzdHlsZSIsIm92ZXJmbG93IiwiaXRlbSIsImxvY2F0aW9uIiwiaGFzaCIsImhlYWRlcl9maXgiLCJvbnNjcm9sbCIsInNob3dIZWFkZXIiLCJwYWdlWU9mZnNldCIsImhvdmVyX2JnX2ltZyIsInNsaWRlX2JveCIsIm9ubW91c2Vkb3duIiwib25tb3VzZW1vdmUiLCJ4Iiwib2Zmc2V0WCIsIndpZHRoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImVfMSIsInRvdWNoZXMiLCJwYWdlWCIsImVfMiIsIm9ubW91c2V1cCIsIm9ubW91c2VsZWF2ZSIsImxvY2FsaXphdGlvbiIsImNoZWNrX2xhbmciLCJrZXkiLCJpbm5lckhUTUwiLCJsbmdfcm9hZG1hcCIsImxuZ19wYWNrcyIsImxuZ190ZWFtIiwibG5nX2Jlc3RpYXJ5IiwibG5nX2xvcmUiLCJsbmdfbWFwX3pvbmUiLCJyb2FkcyIsInJvYWRtYXAiLCJyb2FkIiwicm9hZF9kYXRlIiwicm9hZF9uYW1lIiwicm9hZF9saXN0IiwidGV4dENvbnRlbnQiLCJkYXRlIiwiaW5kZXgiLCJhZGRfbGFuZyIsImluZm8iLCJkb20iLCJwYWNrcyIsInJlZnJlc2giLCJuYW1lIiwid29yayIsImFib3V0IiwidGV4dF9hbGwiLCJpZHgiLCJuYW1lX3pvbmVzIiwibG9jYWxpemF0aW9uX2J0bnMiLCJidG5zIiwic2VsZWN0IiwicGFyZW50Tm9kZSIsImRhdGFzZXQiLCJmbGFnIiwic3ZnIiwic3JjIiwiZ2V0QXR0cmlidXRlIiwic3Vic3RyIiwibGVuZ3RoIiwic2V0QXR0cmlidXRlIiwic2V0VGltZW91dCIsIm1hcCIsImltYWdlcyIsInBvaW50IiwibWFwX21vZGFsIiwiaW5uZXJXaWR0aCIsIm9ubW91c2VvdmVyIiwiYWRkX2NsYXNzIiwib25tb3VzZW91dCIsInJlbW92ZV9jbGFzcyIsImFkZF9uYW1lc196b25lIiwib250b3VjaHN0YXJ0Iiwib250b3VjaGVuZCIsImNoZWNrX2xvcmVfZ2V0IiwiY2xlYXJJbnRlcnZhbCIsImV2ZW50IiwibW9kYWwiLCJvdmVybGF5IiwiYnRuIiwicmVtb3ZlX2J0biIsIm1fdGl0bGUiLCJtX3RleHQiLCJhbGxfaCIsIm9mZnNldEhlaWdodCIsInBvc18xIiwicGFnZVkiLCJwb3NfMiIsIm9mZnNldFRvcCIsImNlbnRlciIsImNsaWVudFkiLCJpbm5lckhlaWdodCIsInVwIiwic2Nyb2xsIiwic2Nyb2xsQnkiLCJ0b3AiLCJsZWZ0IiwiYmVoYXZpb3IiLCJTcGxpZGUiLCJwZXJQYWdlIiwicGVyTW92ZSIsImFycm93cyIsInR5cGUiLCJwYWdpbmF0aW9uIiwiYXV0b3BsYXkiLCJtb3VudCIsInNsaWRlcl9zcGxpZGUiLCJzbGlkZXJfaWQiLCJzbGlkZXIiLCJzbGlkZXJfbGlzdCIsInNsaWRlcl9zbGlkZXMiLCJidG5fZmxpcCIsImNhcmQiLCJyb2FkbWFwX2NvbnQiLCJjb2xvcnMiLCJfMSIsIl8yIiwiQU9TIiwidGVhbV9zbGlkZXIiLCJ0ZWFtX2xpc3QiLCJ0ZWFtX2VsIiwidGVhbV9idG5zIiwicmVtb3ZlX3RlYW0iLCJlbG1zIiwiYW5jaG9ycyIsImFuY2hvciIsInByZXZlbnREZWZhdWx0IiwiYmxvY2tJRCIsInNjcm9sbEludG9WaWV3IiwiYmxvY2siLCJpbml0IiwiZGlzYWJsZSIsInN0YXJ0RXZlbnQiLCJpbml0Q2xhc3NOYW1lIiwiYW5pbWF0ZWRDbGFzc05hbWUiLCJ1c2VDbGFzc05hbWVzIiwiZGlzYWJsZU11dGF0aW9uT2JzZXJ2ZXIiLCJkZWJvdW5jZURlbGF5IiwidGhyb3R0bGVEZWxheSIsIm9mZnNldCIsImRlbGF5IiwiZHVyYXRpb24iLCJlYXNpbmciLCJvbmNlIiwibWlycm9yIiwiYW5jaG9yUGxhY2VtZW50IiwibWVkaWEiLCJzbGlkZXJfdGVhbSIsImxhcmdlIiwibGFyX3NsaWRlcyIsImRlc2t0b3AiLCJkX3NsaWRlcyIsImxhcHRvcCIsImxfc2xpZGVzIiwidGFibGV0IiwidF9zbGlkZXMiLCJwaG9uZSIsInBfc2xpZGVzIiwic2xpZGVzVG9TaG93IiwibWVkaWFMYXJnZSIsIm1hdGNoTWVkaWEiLCJtZWRpYURlc2t0b3AiLCJtZWRpYUxhcHRvcCIsIm1lZGlhVGFibGV0IiwibWVkaWFQaG9uZSIsIm1hdGNoZXMiLCJvcHRpb25zIiwib25yZXNpemUiLCJpbWdfd19yZXoiLCJpbWdzIiwiYm94X3ciLCJjbGllbnRXaWR0aCIsIm15Um91dGVyIiwicGFnZXMiLCJiYXNlIiwibG9jYXRpb25SZXNvbHZlciIsInBhZ2VBY3RpdmUiLCJvbmhhc2hjaGFuZ2UiLCJjaGVja0hhc2giLCJjaGVja19iZXN0aWFyeSIsImNoZWNrX2xvcmUiLCJiYXNlX3BhZ2UiLCJwYWdlIiwicGFnZV9hY3RpdmUiLCJtYWluIiwiaG9tZSIsInByZWxvYWRpbmciLCJtZXRob2QiLCJ1cmwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIs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LEVBQUE7QUFDQSxRQUFBQyxHQUFBLEdBQUEsSUFBQUMsY0FBQSxFQUFBO0FBRUFELElBQUFBLEdBQUEsQ0FBQUUsSUFBQSxDQUFBUCxNQUFBLEVBQUFDLEdBQUE7QUFFQUksSUFBQUEsR0FBQSxDQUFBRyxZQUFBLEdBQUEsTUFBQTs7QUFFQUgsSUFBQUEsR0FBQSxDQUFBSSxNQUFBLEdBQUEsWUFBQTtBQUNBLFVBQUFKLEdBQUEsQ0FBQUssTUFBQSxJQUFBLEdBQUEsRUFBQTtBQUNBTixRQUFBQSxNQUFBLENBQUFDLEdBQUEsQ0FBQU0sUUFBQSxDQUFBO0FBQ0EsT0FGQSxNQUVBO0FBQ0FSLFFBQUFBLE9BQUEsQ0FBQUUsR0FBQSxDQUFBTSxRQUFBLENBQUE7QUFDQTtBQUNBLEtBTkE7O0FBUUFOLElBQUFBLEdBQUEsQ0FBQU8sT0FBQSxHQUFBLFlBQUE7QUFDQVIsTUFBQUEsTUFBQSxDQUFBQyxHQUFBLENBQUFNLFFBQUEsQ0FBQTtBQUNBLEtBRkE7O0FBS0FOLElBQUFBLEdBQUEsQ0FBQVEsSUFBQTtBQUNBLEdBckJBLENBQUE7QUFzQkEiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb250ZW50ID0ge1xyXG5cclxuLypiYXNlLXBhZ2VfX19fX19fX19fX19fX19fX18qL1xyXG5cdC8qc19pbnRybyovXHJcblx0XCJpbnRyb190ZXh0XCI6IHtcclxuXHRcdFwiZW5cIjogXCJXZWxjb21lIHRvIFBhbmRlbW9uaXVtLCBhIHdvcmxkIGJleW9uZCB0aGUgdmFsbGV5IG9mIHRoZSBzaGFkb3cgb2YgZGVhdGguIExhbmRzIGluIHdoaWNoIHRoZXJlIGlzIGFuIGVuZGxlc3Mgd2FyIGZvciBwb3dlci4gSXQgaXMgaGVyZSB0aGF0IGFybWllcyBvZiBmaWVyY2UgZGVtb25zIGFuZCBiZWF1dGlmdWwgZGVtb25ldHRlcyBjbGFzaCB1bmRlciB0aGUgbGVhZGVyc2hpcCBvZiBmdXR1cmUgbG9yZHMuXCIsXHJcblx0XHRcInJ1XCI6IFwi0JTQvtCx0YDQviDQv9C+0LbQsNC70L7QstCw0YLRjCDQsiDQn9Cw0L3QtNC10LzQvtC90LjRg9C8IC0g0LzQuNGALCDRh9GC0L4g0LvQtdC20LjRgiDQt9CwINC00L7Qu9C40L3QvtC5INGB0LzQtdGA0YLQvdC+0Lkg0YLQtdC90LguINCd0LAg0Y3RgtC40YUg0LfQtdC80LvRj9GFINGA0LDQt9Cy0LXRgNC90YPQu9Cw0YHRjCDQsdC10YHQutC+0L3QtdGH0L3QsNGPINCy0L7QudC90LAg0LfQsCDQstC70LDRgdGC0YwuINCY0LzQtdC90L3QviDQt9C00LXRgdGMINCw0YDQvNC40Lgg0YHQstC40YDQtdC/0YvRhSDQtNC10LzQvtC90L7QsiDQuCDQv9GA0LXQutGA0LDRgdC90YvRhSDQtNC10LzQvtC90LXRgdGBINGB0YDQsNC20LDRjtGC0YHRjyDQv9C+0LQg0L/RgNC10LTQstC+0LTQuNGC0LXQu9GM0YHRgtCy0L7QvCDQsdGD0LTRg9GJ0LjRhSDQu9C+0YDQtNC+0LIuXCJcclxuXHRcclxuXHR9LFxyXG5cdC8qaG92ZXJfaW1nX2JnX3RpdGxlKi9cclxuXHRcImhvdmVyX2ltZ19iZ190aXRsZVwiOntcclxuXHRcdFwiZW5cIjpcIkJlY29tZSB0aGUgTG9yZCBvZiB0aGUgVW5kZXJ3b3JsZCEgUGFuZGVtb25pdW0gYXJlIG9yaWdpbmFsIG5mdCBjYXJkcyB3aXRoIHZhcnlpbmcgZGVncmVlcyBvZiByYXJpdHksIGludGVuZGVkIGZvciBjb2xsZWN0aW5nLiBMaW1pdGVkLCB1bmlxdWUgYW5kIGhvdCBhcyBoZWxsLlwiLFxyXG5cdFx0XCJydVwiOiBcItCh0YLQsNC90Ywg0LvQvtGA0LTQvtC8INC/0YDQtdC40YHQv9C+0LTQvdC10LkhINCf0LDQvdC00LXQvNC+0L3QuNGD0LwgLSDRjdGC0L4g0L7RgNC40LPQuNC90LDQu9GM0L3Ri9C1IE5GVC3QutCw0YDRgtC+0YfQutC4INGA0LDQt9C90L7QuSDRgdGC0LXQv9C10L3QuCDRgNC10LTQutC+0YHRgtC4LCDQv9GA0LXQtNC90LDQt9C90LDRh9C10L3QvdGL0LUg0LTQu9GPINC60L7Qu9C70LXQutGG0LjQvtC90LjRgNC+0LLQsNC90LjRjy4g0J7Qs9GA0LDQvdC40YfQtdC90L3Ri9C1LCDRg9C90LjQutCw0LvRjNC90YvQtSDQuCDRh9C10YDRgtC+0LLRgdC60Lgg0LPQvtGA0Y/Rh9C40LUuXCJcclxuXHR9LFxyXG5cdC8qc19pbmZvKi9cclxuXHRcInNfaW5mb19ncmFkXzFcIjp7XHJcblx0XHRcImVuXCI6IFwiSk9JTiBPVVIgVEVMRUdSQU0gQ09NTVVOSVRZXCIsXHJcblx0XHRcInJ1XCI6IFwi0J/RgNC40YHQvtC10LTQuNC90Y/QudGB0Y8g0Log0L3QsNC8INCyICBUZWxlZ3JhbVwiXHJcblx0fSxcclxuXHRcInNfaW5mb19ncmFkXzJcIjp7XHJcblx0XHRcImVuXCI6IFwiWW91IGNhbiBmaW5kIG1vcmUgaW5mb3JtYXRpb24gYWJvdSBtYWdpY2FsIGNyZWF0dXJlcyBpbiBvdXIgYmVzdGlhcnlcIixcclxuXHRcdFwicnVcIjogXCLQkdC+0LvQtdC1INC/0L7QtNGA0L7QsdC90YPRjiDQuNC90YTQvtGA0LzQsNGG0LjRjiDQviDQstC+0LvRiNC10LHQvdGL0YUg0YHRg9GJ0LXRgdGC0LLQsNGFINCy0Ysg0LzQvtC20LXRgtC1INC90LDQudGC0Lgg0LIg0L3QsNGI0LXQvCDQsdC10YHRgtC40LDRgNC40LhcIlxyXG5cdH0sXHJcblx0XCJzX2luZm9fdGV4dF8xXCI6IHtcclxuXHRcdFwiZW5cIjogXCJZb3VyIHRpbWUgaGFzIGNvbWUhXCIsXHJcblx0XHRcInJ1XCI6IFwi0JLRgNC10LzRjyDQv9GA0LjRiNC70L4hIFwiXHJcblx0fSxcclxuXHRcInNfaW5mb190ZXh0XzJcIjoge1xyXG5cdFx0XCJlblwiOiBcIkJlY29tZSB0aGUgc3Ryb25nZXN0IGhlcm8gb2YgUGFuZGVtb25pdW0gYnkgc3Vic2NyaWJpbmcgdG8gb3VyIHRlbGVncmFtIGNoYW5uZWwhIE5ld3MsIGV2ZW50cyBhbmQgc3BlY2lhbCBvZmZlcnMgYXJlIHdhaXRpbmcgZm9yIHlvdSFcIixcclxuXHRcdFwicnVcIjogXCLQn9C+0LTQv9C40YjQuNGB0Ywg0L3QsCDQvdCw0Ygg0YLQtdC70LXQs9GA0LDQvC3QutCw0L3QsNC7INC4INGB0YLQsNC90Ywg0YHQuNC70YzQvdC10LnRiNC40Lwg0LPQtdGA0L7QtdC8INCf0LDQvdC00LXQvNC+0L3QuNGD0LzQsCEg0KLQtdCx0Y8g0LbQtNGD0YIg0L3QvtCy0L7RgdGC0LgsINGB0L7QsdGL0YLQuNGPINC4INGB0L/QtdGG0LjQsNC70YzQvdGL0LUg0L/RgNC10LTQu9C+0LbQtdC90LjRjy5cIlxyXG5cdH0sXHJcblx0XCJzX2luZm9fdGV4dF8zXCI6IHtcclxuXHRcdFwiZW5cIjogXCJOYWlhZCBpcyB0aGUgeW91bmdlciBkZW1vbmVzcyBvZiB0aGUgcml2ZXJzLiBJdCBjb250cm9scyB0aGUgbW92ZW1lbnQgb2YgbWF0dGVyLiBOYWlhZCBydWxlcyBmcm9tIHRoZSB3YXRlcnMgb2YgdGhlIFN0eXggdG8gdGhlIEdyZWF0IExhdmEgRmxvdyBvZiB0aGUgVW5kZXJ3b3JsZC4gU2hlIGxvdmVzIGdvb2Qgam9rZXMuIEF0dGVudGlvbiEgQmVhdXR5IE5haWFkIGNhbiBidXJuIHlvdSB3aXRoIG9uZSBnbGFuY2UgIFRoaXMgYmVhdXR5IGNhbiBidXJuIHlvdSB3aXRoIG9uZSBnbGFuY2UuXCIsXHJcblx0XHRcInJ1XCI6IFwi0J3QsNGP0LTRiyDigJMg0LzQu9Cw0LTRiNC40LUg0LTQtdC80L7QvdC10YHRgdGLINGA0LXQui4g0J7QvdC4INC60L7QvdGC0YDQvtC70LjRgNGD0Y7RgiDQtNCy0LjQttC10L3QuNC1INC80LDRgtC10YDQuNC4LiDQndCw0Y/QtNGLINC/0YDQsNCy0Y/RgiDQvtGCINCy0L7QtCDQodGC0LjQutGB0LAg0LTQviDQktC10LvQuNC60L7Qs9C+INCb0LDQstC+0LPQviDQn9C+0YLQvtC60LAg0J/RgNC10LjRgdC/0L7QtNC90LXQuS4g0J7QvdC4INC70Y7QsdGP0YIg0YXQvtGA0L7RiNC40LUg0YjRg9GC0LrQuC4g0J7QodCi0J7QoNCe0JbQndCeISDQmtGA0LDRgdCw0LLQuNGG0Ysg0J3QsNGP0LTRiyDQvNC+0LbQtdGCINC40YHQv9C10L/QtdC70LjRgtGMINGC0LXQsdGPINC+0LTQvdC40Lwg0LLQt9Cz0LvRj9C00L7QvC5cIlxyXG5cdH0sXHJcblx0XCJzX2luZm9fdGl0bGVfMVwiOntcclxuXHRcdFwiZW5cIjogXCJUaGlzIGlzIGp1c3QgdGhlIGJlZ2lubmluZy4gV2UncmUgcmVsZWFzaW5nIHRoZSBmaXJzdCBiYXRjaCBvZiBvdXIgbGltaXRlZCBlZGl0aW9uIGNhcmRzIHdpdGggUHJldHR5IE5haWFkLlwiLFxyXG5cdFx0XCJydVwiOiBcItCt0YLQviDRgtC+0LvRjNC60L4g0L3QsNGH0LDQu9C+LiDQnNGLINCy0YvQv9GD0YHQutCw0LXQvCDQv9C10YDQstGD0Y4g0L/QsNGA0YLQuNGOINC70LjQvNC40YLQuNGA0L7QstCw0L3QvdC+0Lkg0LrQvtC70LvQtdC60YbQuNC4INC60LDRgNGC0L7Rh9C10Log0YEg0L/RgNC10LrRgNCw0YHQvdGL0LzQuCDQvdCw0Y/QtNCw0LzQuC5cIlxyXG5cdH0sXHJcblx0LypzX2NhcmRzKi9cclxuXHRcInNfY2FyZF90aXRsZV8xXCI6e1xyXG5cdFx0XCJlblwiOiBcIjFzdCBwYWNrXCIsXHJcblx0XHRcInJ1XCI6IFwi0J/QtdGA0LLRi9C5INC/0LDQulwiXHJcblx0fSxcclxuXHRcInNfY2FyZF90aXRsZV8yXCI6e1xyXG5cdFx0XCJlblwiOiBcIjJkIHBhY2tcIixcclxuXHRcdFwicnVcIjogXCLQktGC0L7RgNC+0Lkg0L/QsNC6XCJcclxuXHR9LFxyXG5cdC8qc190ZWFtKi9cclxuXHRcInNfdGVhbV90aXRsZVwiOiB7XHJcblx0XHRcImVuXCI6IFwiT3VyIHRlYW1cIixcclxuXHRcdFwicnVcIjogXCLQutC+0LzQsNC90LTQsFwiXHJcblx0fSxcclxuXHQvKnNfYWJvdXQqL1xyXG5cclxuXHRcInNfYWJvdXRfdGl0bGVfMVwiOntcclxuXHRcdFwiZW5cIjogXCJBYm91dCB1c1wiLFxyXG5cdFx0XCJydVwiOiBcItCeINC90LDRgVwiXHJcblx0fSxcclxuXHRcInNfYWJvdXRfdGl0bGVfMlwiOntcclxuXHRcdFwiZW5cIjogXCJPdXIgc3RvcnlcIixcclxuXHRcdFwicnVcIjogXCLQndCw0YjQsCDQuNGB0YLQvtGA0LjRj1wiXHJcblx0fSxcclxuXHRcInNfYWJvdXRfdGl0bGVfM1wiOntcclxuXHRcdFwiZW5cIjogXCJPdXIgbWlzc2lvblwiLFxyXG5cdFx0XCJydVwiOiBcItCd0LDRiNCwINC80LjRgdGB0LjRj1wiXHJcblx0fSxcclxuXHRcInNfYWJvdXRfdGV4dF8xXCI6e1xyXG5cdFx0XCJlblwiOiBcIldlIGFyZSBhIHlvdW5nIHRlYW0gdW5pdGVkIGJ5IGNvbW1vbiBpbnRlcmVzdHMgYW5kIGdhbWUgZGV2ZWxvcG1lbnQsIHdpdGggcmljaCBleHBlcmllbmNlIGluIHRoZSBtb2JpbGUgbWFya2V0LiBPdXIgcHJvamVjdCBpcyBhIGZhbnRhc3kgbWV0YeKAk3VuaXZlcnNlIHdpdGggcmVmZXJlbmNlcyB0byB0aGluZ3Mgd2UgYWxsIGxvdmUsIGJ1bGl0IG9uIGEgYmxvY2tjaGFpbiBzeXN0ZW0gdXNpbmcgb3JpZ2luYWwgTkZUIGNhcmRzLlwiLFxyXG5cdFx0XCJydVwiOiBcItCc0Ysg4oCTINC80L7Qu9C+0LTQsNGPINC60L7QvNCw0L3QtNCwLCDQvtCx0YrQtdC00LjQvdGP0Y7RidCw0Y8g0L7QsdGJ0LjQvNC4INC40L3RgtC10YDQtdGB0LDQvNC4INC4INC00LXRj9GC0LXQu9GM0L3QvtGB0YLRjNGOINCyINGB0YTQtdGA0LUg0YDQsNC30YDQsNCx0L7RgtC60Lgg0LjQs9GALCDRgSDQsdC+0LPQsNGC0YvQvCDQvtC/0YvRgtC+0Lwg0YDQsNCx0L7RgtGLINC90LAg0LzQvtCx0LjQu9GM0L3QvtC8INGA0YvQvdC60LUuINCd0LDRiCDQv9GA0L7QtdC60YIg4oCTINGN0YLQviDRhNGN0L3RgtC10LfQuNC50L3QsNGPINC80LXRgtCwIOKAkyDQstGB0LXQu9C10L3QvdCw0Y8g0YEg0L7RgtGB0YvQu9C60LDQvNC4INC6INCy0LXRidCw0LwsINC60L7RgtC+0YDRi9C1INC80Ysg0LLRgdC1INC70Y7QsdC40LwsINC/0L7RgdGC0YDQvtC10L3QvdCw0Y8g0L3QsCDQsdC70L7QutGH0LXQudC9LdGB0LjRgdGC0LXQvNC1INGBINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNC10Lwg0L7RgNC40LPQuNC90LDQu9GM0L3Ri9GFIE5GVC3QutCw0YDRgi5cIlxyXG5cdH0sXHJcblx0XCJzX2Fib3V0X3RleHRfMlwiOntcclxuXHRcdFwiZW5cIjogXCJJbiBKdW5lIDIwMjEsIGEgZ3JvdXAgb2YgcHJvZ3JhbW1lcnMgYW5kIGRlc2lnbmVycyBhbHJlYWR5IHdvcmtpbmcgb24gbW9iaWxlIGdhbWVzIHR1cm4gdGhlaXIgZXllcyBvbiB0aGUgYmxvY2tjaGFpbiBzeXN0ZW0uIEl0IHR1cm5lZCBvdXQgdGhhdCBhbGwgb2YgdXMgYm91Z2h0IE5GVCBjYXJkcyBmb3IgY29sbGVjdGlibGUgb3IgYmxvY2tjaGFpbiBnYW1lcy4gR2FtZXMgY2Fubm90IGRldmVsb3Agd2l0aG91dCB0ZWNobm9sb2d5LCBhbmQgdGVjaG5vbG9neSBpcyB3ZWxsIHByb21vdGVkIHRocm91Z2ggZ2FtZXMuIFdlIGhhdmUgYWxsIHRoZSBwb3RlbnRpYWwgdG8gY3JlYXRlIG5ldyBpbnRlcmVzdGluZyBwcm9kdWN0cyB3aXRoIHRoZSBsYXN0ZXN0IHRlY2hub2xvZ3kuXCIsXHJcblx0XHRcInJ1XCI6IFwi0JIg0LjRjtC90LUgMjAyMSDQs9C+0LTQsCDQs9GA0YPQv9C/0LAg0L/RgNC+0LPRgNCw0LzQvNC40YHRgtC+0LIg0Lgg0LTQuNC30LDQudC90LXRgNC+0LIsINGD0LbQtSDRgNCw0LHQvtGC0LDQstGI0LDRjyDQvdCw0LQg0LzQvtCx0LjQu9GM0L3Ri9C80Lgg0LjQs9GA0LDQvNC4LCDQvtCx0YDQsNGC0LjQu9CwINGB0LLQvtC5INCy0LfQvtGAINC90LAg0LHQu9C+0LrRh9C10LnQvSwg0LrQvtC70LvQtdC60YbQuNC5INC40LvQuCDQsdC70L7QutGH0LXQudC9LdC40LPRgC4g0JjQs9GA0Ysg0L3QtSDQvNC+0LPRg9GCINGA0LDQt9Cy0LjQstCw0YLRjNGB0Y8g0LHQtdC3INGC0LXRhdC90L7Qu9C+0LPQuNC5LCDQsCDRgtC10YXQvdC+0LvQvtCz0LjQuCDRhdC+0YDQvtGI0L4g0L/RgNC+0LTQstC40LPQsNGO0YLRgdGPINGH0LXRgNC10Lcg0LjQs9GA0YsuINCjINC90LDRgSDQtdGB0YLRjCDQstGB0LUg0LLQvtC30LzQvtC20L3QvtGB0YLQuCDQtNC70Y8g0YHQvtC30LTQsNC90LjRjyDQvdC+0LLRi9GFINC40L3RgtC10YDQtdGB0L3Ri9GFINC/0YDQvtC00YPQutGC0L7QsiDRgSDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjQtdC8INC90L7QstC10LnRiNC40YUg0YLQtdGF0L3QvtC70L7Qs9C40LkuXCJcclxuXHR9LFxyXG5cdFwic19hYm91dF90ZXh0XzNcIjp7XHJcblx0XHRcImVuXCI6IFwiVGhlIHByaW9yaXR5IGZvciB1cyBpcyB0byB1c2UgYW5kIHBvcHVsYXJpemUgbW9kZXJuIHRlY2hub2xvZ2llcyBhbmQgY3JlYXRlIGdhbWVzLiBXZSBiZWxpZXZlIHRoYXQgdGhlIGJsb2NrY2hhaW4gc3lzdGVtIGlzIHRoZSBmdXR1cmUuXCIsXHJcblx0XHRcInJ1XCI6IFwi0J/RgNC40L7RgNC40YLQtdGC0L7QvCDQtNC70Y8g0L3QsGMg0Y/QstC70Y/QtdGC0YHRjyDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjQtSDQuCDQv9C+0L/Rg9C70Y/RgNC40LfQsNGG0LjRjyDRgdC+0LLRgNC10LzQtdC90L3Ri9GFINGC0LXRhdC90L7Qu9C+0LPQuNC5INC4INGB0L7Qt9C00LDQvdC40LUg0LjQs9GALiDQnNGLINCy0LXRgNC40LwsINGH0YLQviDQt9CwINGB0LjRgdGC0LXQvNC+0Lkg0LHQu9C+0LrRh9C10LnQvSDigJMg0LHRg9C00YPRidC10LUuXCJcclxuXHR9LFxyXG5cclxuXHJcblxyXG4vKmJlc3RpYXJ5LXBhZ2VfX19fX19fX19fX19fX19fX19fX18qL1xyXG5cdFwiYmVzdGlhcnlfbWFpbl90aXRsZVwiOntcclxuXHRcdFwiZW5cIjogXCJXRUxDT01FIFRPIFRIRSBQQU5FRE9OSVVNIEJFU1RJQVJZXCIsXHJcblx0XHRcInJ1XCI6IFwi0JTQvtCx0YDQviDQv9C+0LbQsNC70L7QstCw0YLRjCDQsiDQsdC10YHRgtC40LDRgNC40Lkg0J/QsNC90LTQtdC80L7QvdC40YPQvNCwXCJcclxuXHR9LFxyXG5cdFwicGFja18xX3RpdGxlXCI6e1xyXG5cdFx0XCJlblwiOlwiTUVSTUFJRCBOQUlBRFNcIixcclxuXHRcdFwicnVcIjpcItCg0YPRgdCw0LvQutC44oCT0J3QsNGP0LTRi1wiXHJcblx0fSxcclxuXHRcInBhY2tfMl90aXRsZVwiOntcclxuXHRcdFwiZW5cIjpcIk55bXBoXCIsXHJcblx0XHRcInJ1XCI6XCLQnNCw0LvRi9C1INCd0LDRj9C00YtcIlxyXG5cdH0sXHJcblxyXG4vKmxvcmUtcGFnZV9fX19fX19fX19fXyovXHJcblxyXG5cdFwibG9yZS1tYWluX3RpdGxlXCI6IHtcclxuXHRcdFwiZW5cIjpcIldlbGNvbWUgdG8gUGFuZGVtb25pdW0sIGEgd29ybGQgYmV5b25kIHRoZSB2YWxsZXkgb2YgdGhlIHNoYWRvdyBvZiBkZWF0aC4gTGFuZHMgaW4gd2hpY2ggdGhlcmUgaXMgYW4gZW5kbGVzcyB3YXIgZm9yIHBvd2VyLiBJdCBpcyBoZXJlIHRoYXQgYXJtaWVzIG9mIGZpZXJjZSBkZW1vbnMgYW5kIGJlYXV0aWZ1bCBkZW1vbmV0dGVzIGNsYXNoIHVuZGVyIHRoZSBsZWFkZXJzaGlwIG9mIGZ1dHVyZSBsb3Jkcy5cIixcclxuXHRcdFwicnVcIjpcItCU0L7QsdGA0L4g0L/QvtC20LDQu9C+0LLQsNGC0Ywg0LIg0J/QsNC90LTQtdC80L7QvdC40YPQvCAtINC80LjRgCwg0YfRgtC+INC70LXQttC40YIg0LfQsCDQtNC+0LvQuNC90L7QuSDRgdC80LXRgNGC0L3QvtC5INGC0LXQvdC4LtCd0LAg0Y3RgtC40YUg0LfQtdC80LvRj9GFINGA0LDQt9Cy0LXRgNC90YPQu9Cw0YHRjCDQsdC10YHQutC+0L3QtdGH0L3QsNGPINCy0L7QudC90LAg0LfQsCDQstC70LDRgdGC0YwuINCY0LzQtdC90L3QviDQt9C00LXRgdGMINCw0YDQvNC40Lgg0YHQstC40YDQtdC/0YvRhSDQtNC10LzQvtC90L7QsiDQuCDQv9GA0LXQutGA0LDRgdC90YvRhSDQtNC10LzQvtC90LXRgdGBINGB0YDQsNC20LDRjtGC0YHRjyDQv9C+0LQg0L/RgNC10LTQstC+0LTQuNGC0LXQu9GM0YHRgtCy0L7QvCDQsdGD0LTRg9GJ0LjRhSDQu9C+0YDQtNC+0LIuXCJcclxuXHR9LFxyXG5cdFwibG9yZS1hYm91dF90aXRsZVwiOntcclxuXHRcdFwiZW5cIjpcIkRlYXIgdHJhdmVsZXIsXCIsXHJcblx0XHRcInJ1XCI6XCLQlNC+0YDQvtCz0L7QuSDQv9GD0YLQtdGI0LXRgdGC0LLQtdC90L3QuNC6LFwiXHJcblx0fSxcclxuXHRcImxvcmUtYWJvdXRfdGV4dFwiOntcclxuXHRcdFwiZW5cIjpcIkkgZG8gbm90IGtub3cgd2hvIHlvdSBnb3QgdGhpcyBtYXAgZnJvbSBhbmQgZm9yIGhvdyBtdWNoLCBidXQgcmVtZW1iZXIgdGhhdCB5b3Ugbm93IGhvbGQgYW4gaW5jcmVkaWJseSByYXJlIGFydGVmYWN0LiBQbGVhc2UsIGtlZXAgaXQgc2FmZS4gPGJyLz4gSeKAmXZlIHNwZW50IG1vcmUgdGhhbiB0ZW4geWVhcnMgd29ya2luZyBvbiBpdCBhbmQgSeKAmXZlIG1hcmtlZCBhbGwgdGhlIHZpbGxhZ2VzIGFuZCBhc3RyYWwgY2l0aWVzIHRoYXQgSeKAmXZlIGV2ZXIgYmVlbiB0by4gPGJyLz4gTm93LCB0aGUgZmlyc3QgUGFuZGVtb25pdW0gcGxhbiBpcyByZWFkeSBmb3IgeW91ciBwZXJzb25hbCBkaXNjb3Zlcmllcy4gSXRzIGZ1dHVyZSBob2xkZXJzIGFyZSBzdXJlIHRvIGxlYXJuIGFib3V0IHRoZW0uIDxici8+IFAuUy4gaWYgeW91IGFyZSB0aGlua2luZyB0aGF0IHlvdSdyZSBkZWFsaW5nIHdpdGggYW4gb3JkaW5hcnkgcGllY2Ugb2YgcGFwZXIsIHlvdSdyZSBpbmNyZWRpYmx5IG1pc3Rha2VuIDxici8+UmVzcGVjdGZ1bGx5LCBodW5kZXJpbmcgTWFucm9jaywgd2l6YXJkIGFuZCBjYXJ0b2dyYXBoZXIuIFwiLFxyXG5cdFx0XCJydVwiOlwi0L3QtSDQt9C90LDRjiDQvtGCINC60L7Qs9C+INC4INC30LAg0YHQutC+0LvRjNC60L4g0YLRiyDQv9C+0LvRg9GH0LjQuyDRjdGC0YMg0LrQsNGA0YLRgy4g0J7QtNC90LDQutC+INC/0L7QvNC90LgsINGH0YLQviDRgtC10L/QtdGA0Ywg0LIg0YLQstC+0LjRhSDRgNGD0LrQsNGFINC90LDRhdC+0LTQuNGC0YHRjyDQvdC10LLQtdGA0L7Rj9GC0L3QviDRgNC10LTQutC40Lkg0LDRgNGC0LXRhNCw0LrRgi4g0J/QvtC20LDQu9GD0LnRgdGC0LAsINC30LDRidC40YLQuCDQtdCz0L4uPGJyLz7QryDRgNCw0LHQvtGC0LDQuyDQvdCw0LQg0Y3RgtC+0Lkg0LrQsNGA0YLQvtC5INCx0L7Qu9GM0YjQtSDQtNC10YHRj9GC0LrQsCDQu9C10YIsINC4INC+0YLQvNC10YLQuNC7INC90LAg0L3QtdC5INCy0YHQtSDQtNC10YDQtdCy0L3QuCDQuCDQsNGB0YLRgNCw0LvRjNC90YvQtSDQs9C+0YDQvtC00LAsINC60L7RgtC+0YDRi9C1INC/0L7QstGB0YLRgNC10YfQsNC7Ljxici8+0KLQtdC/0LXRgNGMINC/0LXRgNCy0YvQuSDQv9C70LDQvSDQn9Cw0L3QtNC10LzQvtC90LjRg9C80LAg0LPQvtGC0L7QsiDQtNC70Y8g0YLQstC+0LjRhSDQu9C40YfQvdGL0YUg0L7RgtC60YDRi9GC0LjQuS4g0J4g0L3QuNGFINC+0LHRj9C30LDRgtC10LvRjNC90L4g0YPQt9C90LDRjtGCINGB0LvQtdC00YPRjtGJ0LjQtSDQstC70LDQtNC10LvRjNGG0Ysg0LrQsNGA0YLRiy48YnIvPlAuUy4g0LXRgdC70Lgg0YLRiyDRgdGH0LjRgtCw0LXRiNGMLCDRh9GC0L4g0LjQvNC10LXRiNGMINC00LXQu9C+INGBINC+0LHRi9GH0L3Ri9C8INC60YPRgdC60L7QvCDQsdGD0LzQsNCz0LgsINGC0L4g0L3QtdCy0LXRgNC+0Y/RgtC90L4g0L7RiNC40LHQsNC10YjRjNGB0Y8uPGJyLz7QoSDRg9Cy0LDQttC10L3QuNC10LwsINCT0YDQvtC80L7Qs9C70LDRgdC90YvQuSDQnNCw0L3RgNC+0LosINCy0L7Qu9GI0LXQsdC90LjQuiDQuCDQutCw0YDRgtC+0LPRgNCw0YRcIlxyXG5cdH0sXHJcblx0XCJsb3JlLWxhc3RfdGl0bGVcIjp7XHJcblx0XHRcImVuXCI6IFwiWW91IGNhbiBsZWFybiBhYm91dCB0aGUgY3JlYXR1cmVzIHRoYXQgbGl2ZSBpbiB0aGUgd29ybGQgb2YgUGFuZGVtb25pdW0gZnJvbSBvdXIgQmVzdGlhcnlcIixcclxuXHRcdFwicnVcIjogXCLQniDQodCj0KnQldCh0KLQktCQ0KUsINCa0J7QotCe0KDQq9CVINCe0JHQmNCi0JDQrtCiINCSINCc0JjQoNCVINCf0JDQndCU0JXQnNCe0J3QmNCj0JzQkCwg0JLQqyDQnNCe0JbQldCi0JUg0KPQl9Cd0JDQotCsINCY0Jcg0J3QkNCo0JXQk9CeINCR0JXQodCi0JjQkNCg0JjQr1wiXHJcblx0fSxcclxuXHJcblxyXG5cclxuXHQvKmJ0bnMqL1xyXG5cdFwiYnRuX2FoXCI6IHtcclxuXHRcdFwiZW5cIjogXCJGaW5kIHVzIG9uIGF0b21pY2h1YlwiLFxyXG5cdFx0XCJydVwiOiBcItCd0LDQudC00Lgg0L3QsNGBINC90LAgYXRvbWljaHViXCJcclxuXHR9LFxyXG5cdFwiYnRuX2JvdFwiOntcclxuXHRcdFwiZW5cIjogXCJQYW5kZW1vbml1bSBib3RcIixcclxuXHRcdFwicnVcIjogXCJQYW5kZW1vbml1bSDQsdC+0YJcIlxyXG5cdH0sXHJcblx0XCJidG5fYmVzdGlhcnlcIjp7XHJcblx0XHRcImVuXCI6IFwiQmVzdGlhcnlcIixcclxuXHRcdFwicnVcIjogXCLQkdC10YHRgtC40LDRgNC40LlcIlx0XHRcclxuXHR9LFxyXG5cdFwiYnRuX3RlYW1cIjp7XHJcblx0XHRcImVuXCI6IFwiVGVhbVwiLFxyXG5cdFx0XCJydVwiOiBcItCa0L7QvNCw0L3QtNCwXCJcclxuXHR9LFxyXG5cdFwiYnRuX2Fib3V0XCI6e1xyXG5cdFx0XCJlblwiOlwiQWJvdXRcIixcclxuXHRcdFwicnVcIjogXCLQniDQvdCw0YFcIlxyXG5cdH0sXHJcblx0XCJidG5faG9tZVwiOntcclxuXHRcdFwiZW5cIjogXCJIb21lXCIsXHJcblx0XHRcInJ1XCI6IFwi0JPQu9Cw0LLQvdCw0Y9cIlxyXG5cdH0sXHJcblx0XCJidG5fbG9yZVwiOntcclxuXHRcdFwiZW5cIjogXCJMb3JlXCIsXHJcblx0XHRcInJ1XCI6IFwi0JvQvtGAXCJcclxuXHR9LFxyXG5cdFwiYnRuX25hdlwiOntcclxuXHRcdFwiZW5cIjogXCJOYXZpZ2F0aW9uXCIsXHJcblx0XHRcInJ1XCI6IFwi0J3QsNCy0LjQs9Cw0YbQuNGPXCJcclxuXHR9LFxyXG5cdFwiYnRuX2xvcmVfaG9tZVwiOntcclxuXHRcdFwiZW5cIjpcIlRvIHRoZSBtYWluXCIsXHJcblx0XHRcInJ1XCI6XCLQndCwINCz0LvQsNCy0L3Rg9GOXCJcclxuXHR9XHJcblxyXG59IiwiXHJcblxyXG5mdW5jdGlvbiBhZGRCZXN0aWFyeV9wYWNrKHBhY2ssIHBhY2tfbmFtZSwgbGlzdF9pZCl7XHJcblxyXG5cdGNvbnN0IGxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGxpc3RfaWQpO1xyXG4gIGxldCBlbGVtcyA9IGxpc3QucXVlcnlTZWxlY3RvckFsbCgnbGknKTtcclxuXHJcbiAgbGV0IF9sYW5nID0gJyc7XHJcblxyXG4gIGZfY2hlY2tfbGFuZygpO1xyXG5cclxuICBlbGVtcy5mb3JFYWNoKGVsPT5lbC5yZW1vdmUoKSlcclxuXHJcbiAgICBcclxuICBwYWNrLmZvckVhY2goKGVsLCBpKT0+e1xyXG5cclxuICAgIGxldCBIVE1MID0gJyc7XHJcblxyXG4gICAgbGV0IGZpcnN0ID0gYDxsaSBjbGFzcz1cImJlc3RpYXJ5LWxpc3RfX2VsXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwiYmVzdGlhcnktbGlzdF9fYmxvY2tcIj5cclxuICAgICAgPGltZyBzcmM9XCIuL2Fzc2V0cy9pbWFnZXMvJHtwYWNrX25hbWV9LyR7ZWwuaW1nfS5wbmdcIj4gXHJcbiAgICAgIDxkaXYgY2xhc3M9XCJiZXN0aWFyeS1saXN0X19ib3hcIj5gXHJcblxyXG4gICAgbGV0IHRpdGxlID0gJzxoMyBjbGFzcz1cInRpdGxlXCI+bm8gbmFtZTwvaDM+JztcclxuXHJcbiAgICBpZihlbFtfbGFuZ10uYmVzdGlhcnkudGl0bGUgPT09IFwiXCIgfHwgIWVsW19sYW5nXS5iZXN0aWFyeS50aXRsZSl7XHJcbiAgICAgIHRpdGxlID0gYDxoMyBjbGFzcz1cInRpdGxlXCI+JHtlbFtfbGFuZ10udGl0bGV9PC9oMz5gO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgIHRpdGxlID0gYDxoMyBjbGFzcz1cInRpdGxlXCI+JHtlbFtfbGFuZ10uYmVzdGlhcnkudGl0bGV9PC9oMz5gO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBlbmQgPSBgXHJcbiAgICAgIDxwIGNsYXNzPVwidGV4dCBzY3JvbGxfMVwiPiR7ZWxbX2xhbmddLmJlc3RpYXJ5LnRleHR9PC9wPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cImhyXCI+PC9kaXY+XHJcbiAgICA8L2xpPmBcclxuXHJcbiAgICBIVE1MID0gZmlyc3QrdGl0bGUrZW5kOyAgICBcclxuXHJcbiAgXHRsaXN0Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlRW5kJywgSFRNTFx0KTtcclxuICB9KVxyXG5cclxuXHJcblxyXG4gIGZ1bmN0aW9uIGZfY2hlY2tfbGFuZygpe1xyXG4gICAgbGV0IGxzID0gd2luZG93LmxvY2FsU3RvcmFnZTtcclxuXHJcbiAgICBpZighbHMucGFuZGVtb25pdW1fbGFuZyl7XHJcbiAgICAgIGxzLnNldEl0ZW0oJ3BhbmRlbW9uaXVtX2xhbmcnLCAnZW4nKTtcclxuICAgICAgX2xhbmcgPSBscy5wYW5kZW1vbml1bV9sYW5nO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgIF9sYW5nID0gbHMucGFuZGVtb25pdW1fbGFuZztcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuXHJcbn0iLCJmdW5jdGlvbiBhZGRfbG9yZV96b25lKCl7XHJcblx0Y29uc3QgbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb3JlLWhpc3RvcnlfX2xpc3QnKTtcclxuXHRjb25zdCBvbGRfem9uZXMgPSBsaXN0LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyk7XHJcblx0Y29uc3Qgem9uZXMgPSBkYXRhX2xvcmUubG9yZTtcclxuXHJcblx0bGV0IGxhbmcgPSB3aW5kb3cubG9jYWxTdG9yYWdlLnBhbmRlbW9uaXVtX2xhbmc7XHJcblxyXG5cclxuXHRvbGRfem9uZXMuZm9yRWFjaChlbCA9PiBlbC5yZW1vdmUoKSk7XHJcblxyXG5cdHpvbmVzLmZvckVhY2goKGVsLCBpKT0+e1xyXG5cdFx0bGV0IGh0bWwgPSAnJztcclxuXHJcblx0XHRsZXQgZmlyc3QgPSBgPGxpIGNsYXNzPVwibG9yZS1oaXN0b3J5X19lbFwiIGlkPVwiJHtlbC5pZH1cIj5cclxuXHRcdFx0PGgzIGNsYXNzPVwidGl0bGUgX2dyYWRcIj4ke2VsW2xhbmddLnRpdGxlfTwvaDM+XHJcblx0XHRcdDxkaXYgY2xhc3M9XCJsb3JlLWhpc3RvcnlfX2Jsb2NrXCI+XHJcblx0XHRcdFx0PGltZyBzcmM9XCIuL2Fzc2V0cy9pbWFnZXMvbWFwLyR7ZWwuaW1nfS5wbmdcIj5cdGBcclxuXHJcblxyXG5cdFx0bGV0IHRleHQgPSAnJztcclxuXHRcdGxldCBwbGFjZWhvbGRlciA9ICcnO1xyXG5cclxuXHRcdGVsW2xhbmddLnRleHQuZm9yRWFjaChwPT4gdGV4dCs9IGA8cCBjbGFzcz1cImxvcmUtdGV4dFwiPiR7cH08L3A+YClcclxuXHJcblx0XHRpZihlbFtsYW5nXS5wbGFjZWhvbGRlcil7XHJcblx0XHRcdHBsYWNlaG9sZGVyID0gYDxwIGNsYXNzPVwibG9yZS1wbGFjZWhvbGRlclwiPiR7ZWxbbGFuZ10ucGxhY2Vob2xkZXJ9PC9wPmBcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgZW5kID0gYFxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdDwvbGk+YFxyXG5cclxuXHRcdGh0bWwgPSBmaXJzdCt0ZXh0K3BsYWNlaG9sZGVyK2VuZDtcclxuXHJcblx0XHRsaXN0Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlRW5kJywgaHRtbCk7XHJcblx0fSlcdFxyXG5cclxufSIsImZ1bmN0aW9uIGRhcmtfdGhlbWUoKXtcclxuXHJcblx0Y29uc3QgbWFpbl9jb250ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW5Db250ZW50Jyk7XHJcblx0Y29uc3QgbG9nbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idG4tdGhlbWUnKTtcclxuXHJcblx0bG9nby5vbmNsaWNrID0gKCk9PntcclxuXHRcdGNoZWNrX3RoZW1lKCk7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBjaGVja190aGVtZSgpe1xyXG5cdFx0aWYobG9nby5jbGFzc0xpc3QuY29udGFpbnMoJ19hY3RpdmUnKSl7XHJcblx0XHRcdG1haW5fY29udC5jbGFzc0xpc3QucmVtb3ZlKCdfZGFyaycpO1xyXG5cdFx0XHRsb2dvLmNsYXNzTGlzdC5yZW1vdmUoJ19hY3RpdmUnKTtcclxuXHRcdH1lbHNle1x0XHRcdFxyXG5cdFx0XHRtYWluX2NvbnQuY2xhc3NMaXN0LmFkZCgnX2RhcmsnKTtcclxuXHRcdFx0bG9nby5jbGFzc0xpc3QuYWRkKCdfYWN0aXZlJyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRjaGVja190aGVtZSgpO1xyXG5cclxufVxyXG5kYXJrX3RoZW1lKCk7IiwiXHJcblxyXG4vKl9fX19fX19zcmNfX19fX19fX3JlcSovXHJcblxyXG5jb25zdCBkX3BhY2tfMSA9ICcuL3Jlc291cmNlcy9kYXRhL3BhY2tfMS5qc29uJztcclxuY29uc3QgZF9wYWNrXzIgPSAnLi9yZXNvdXJjZXMvZGF0YS9wYWNrXzIuanNvbic7XHJcbmNvbnN0IGRfcm9hZG1hcCA9ICcuL3Jlc291cmNlcy9kYXRhL3JvYWRtYXAuanNvbic7XHJcbmNvbnN0IGRfdGVhbSA9ICcuL3Jlc291cmNlcy9kYXRhL3RlYW0uanNvbic7XHJcbmNvbnN0IGRfbG9yZSA9ICcuL3Jlc291cmNlcy9kYXRhL2xvcmUuanNvbic7XHJcblxyXG5cclxuLypfX19fX19kYXRhX3ZhcnNfX19fX19fX19fKi9cclxudmFyIGRhdGFfcGFja18xID0gbnVsbDtcclxudmFyIGRhdGFfcGFja18yID0gbnVsbDtcclxudmFyIGRhdGFfcm9hZG1hcCA9IG51bGw7XHJcbnZhciBkYXRhX3RlYW0gPSBudWxsO1xyXG52YXIgZGF0YV9sb3JlID0gbnVsbDtcclxuLypfX19fX19fbWFpbl92YXJzX19fX19fXyovXHJcbnZhciBtX3BhY2tfMSA9IHVuZGVmaW5lZDtcclxudmFyIG1fcGFja18yID0gdW5kZWZpbmVkO1xyXG52YXIgbV9yb2FkbWFwID0gdW5kZWZpbmVkO1xyXG52YXIgbV90ZWFtID0gdW5kZWZpbmVkO1xyXG4vKmxvcmUqL1xyXG52YXIgbV9sb3JlID0gdW5kZWZpbmVkO1xyXG4vKmJlc3RpYXJ5Ki9cclxudmFyIG1fYmVzdGlhcnlfcGFja18xID0gdW5kZWZpbmVkO1xyXG52YXIgbV9iZXN0aWFyeV9wYWNrXzIgPSB1bmRlZmluZWQ7XHJcblxyXG5cclxuc2VuZFJlcXVlc3QoJ0dFVCcsIGRfcGFja18xKVxyXG4gIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgZGF0YV9wYWNrXzEgPSBkYXRhO1xyXG4gIGFkZENhcmQoc2xpZGVyXzEsJyNzbGlkZXItY2FyZHNfMScsICdwYWNrXzEnLCBkYXRhLnBhY2tfMSk7XHJcbiAgYWRkQmVzdGlhcnlfcGFjayhkYXRhLnBhY2tfMSwgJ3BhY2tfMScsICcjYmVzdGlhcnktcGFja18xJyk7XHJcbiAgfSlcclxuICAudGhlbihlPT57XHJcbiAgICBsZXQgc2VjID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NsaWRlci1jYXJkc18xJyk7XHJcbiAgICBtX3BhY2tfMSA9IHNlYy5xdWVyeVNlbGVjdG9yQWxsKCdsaScpO1xyXG4gICAgLypiZXN0aWFyeSovXHJcbiAgICBsZXQgYmVzdGlhcnlfbGlzdCAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYmVzdGlhcnktcGFja18xJyk7XHJcbiAgICBtX2Jlc3RpYXJ5X3BhY2tfMSA9IGJlc3RpYXJ5X2xpc3Q7XHJcbiAgfSlcclxuICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpXHJcblxyXG5cclxuXHJcbnNlbmRSZXF1ZXN0KCdHRVQnLCBkX3BhY2tfMilcclxuICAudGhlbihkYXRhID0+IHtcclxuICAgIGRhdGFfcGFja18yID0gZGF0YTtcclxuICAgYWRkQ2FyZChzbGlkZXJfMiwnI3NsaWRlci1jYXJkc18yJywgJ3BhY2tfMicsIGRhdGEucGFja18yKTtcclxuICAgYWRkQmVzdGlhcnlfcGFjayhkYXRhLnBhY2tfMiwgICdwYWNrXzInLCAnI2Jlc3RpYXJ5LXBhY2tfMicpO1xyXG4gIH0pXHJcbiAgLnRoZW4oZT0+e1xyXG4gICAgbGV0IHNlYyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzbGlkZXItY2FyZHNfMicpO1xyXG4gICAgbV9wYWNrXzIgPSBzZWMucXVlcnlTZWxlY3RvckFsbCgnbGknKTtcclxuICAgIC8qYmVzdGlhcnkqL1xyXG4gICAgbGV0IGJlc3RpYXJ5X2xpc3QgID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Jlc3RpYXJ5LXBhY2tfMicpO1xyXG4gICAgbV9iZXN0aWFyeV9wYWNrXzIgPSBiZXN0aWFyeV9saXN0O1xyXG4gIH0pXHJcbiAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKVxyXG5cclxuXHJcblxyXG5zZW5kUmVxdWVzdCgnR0VUJywgZF9yb2FkbWFwKVxyXG4gIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgZGF0YV9yb2FkbWFwID0gZGF0YTtcclxuICAgIGFkZF9yb2FkbWFwKCk7XHJcbiAgfSlcclxuICAudGhlbihlPT57XHJcbiAgICBsZXQgc2VjID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Nfcm9hZG1hcCcpO1xyXG4gICAgbV9yb2FkbWFwID0gc2VjLnF1ZXJ5U2VsZWN0b3JBbGwoJy5yb2FkJyk7XHJcbiAgfSlcclxuICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpXHJcblxyXG5cclxuXHJcbnNlbmRSZXF1ZXN0KCdHRVQnLCBkX3RlYW0pXHJcbiAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICBkYXRhX3RlYW0gPSBkYXRhO1xyXG4gICAgdGVhbV9hZGQoZGF0YS50ZWFtKTtcclxuICB9KVxyXG4gIC50aGVuKGU9PntcclxuICAgIGxldCBzZWMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc190ZWFtJyk7XHJcbiAgICBtX3RlYW0gPSBzZWMucXVlcnlTZWxlY3RvckFsbCgnLnNwbGlkZV9fc2xpZGUnKTtcclxuICB9KVxyXG4gIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSlcclxuXHJcblxyXG5zZW5kUmVxdWVzdCgnR0VUJywgZF9sb3JlKVxyXG4gIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgZGF0YV9sb3JlID0gZGF0YTtcclxuICAgIGFkZF9sb3JlX3pvbmUoKTtcclxuICB9KVxyXG4gIC50aGVuKGU9PntcclxuICAgIGxldCBzZWMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9yZS1oaXN0b3J5Jyk7XHJcbiAgICBtX2xvcmUgPSBzZWMucXVlcnlTZWxlY3RvckFsbCgnbGknKTtcclxuICB9KVxyXG4gIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSlcclxuXHJcblxyXG5cclxuIiwiXHJcbmZ1bmN0aW9uIGhhbWJ1cmdlcigpIHtcclxuICB2YXIgaGFtYnVyZ2VyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhhbWJ1cmdlcicpO1xyXG4gIHZhciBoYW1idXJnZXJfbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX2Jsb2NrJyk7XHJcbiAgdmFyIGxpbmtfZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubmF2X19saW5rJyk7XHJcbiAgdmFyIGhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKTtcclxuXHJcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XHJcbiAgdmFyIHByZWxvYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcmVsb2FkaW5nJyk7XHJcblxyXG4gIGhhbWJ1cmdlci5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaGFtYnVyZ2VyLmNsYXNzTGlzdC50b2dnbGUoJ19hY3RpdmUnKTtcclxuICB9O1xyXG5cclxuICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcbiAgICBpZihwcmVsb2FkZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdfYWN0aXZlJykpe1xyXG4gICAgICBib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7ICAgICAgXHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKGhhbWJ1cmdlci5jbGFzc0xpc3QuY29udGFpbnMoXCJfYWN0aXZlXCIpKSB7XHJcbiAgICAgIGhlYWRlci5jbGFzc0xpc3QuYWRkKCdoZWFkZXItYmctbm9uZScpO1xyXG4gICAgICBoYW1idXJnZXJfbWVudS5jbGFzc0xpc3QuYWRkKCdoYW1idXJnZXItbWVudV9hY3RpdmUnKTtcclxuICAgICAgYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2hlYWRlci1iZy1ub25lJyk7XHJcbiAgICAgIGhhbWJ1cmdlcl9tZW51LmNsYXNzTGlzdC5yZW1vdmUoJ2hhbWJ1cmdlci1tZW51X2FjdGl2ZScpO1xyXG4gICAgICBib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2F1dG8nO1xyXG4gICAgfVxyXG4gIH0sIDEwMCk7XHJcblxyXG5cclxuICBsaW5rX2VsZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcclxuICAgIGl0ZW0ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaGFtYnVyZ2VyLmNsYXNzTGlzdC5yZW1vdmUoXCJfYWN0aXZlXCIpO1xyXG4gICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcnXHJcbiAgICB9O1xyXG4gIH0pO1xyXG59XHJcblxyXG5oYW1idXJnZXIoKTtcclxuXHJcbiIsIlxyXG5mdW5jdGlvbiBoZWFkZXJfZml4KCkge1xyXG4gIHZhciBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJyk7XHJcblxyXG4gIGRvY3VtZW50Lm9uc2Nyb2xsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgc2hvd0hlYWRlcigpO1xyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIHNob3dIZWFkZXIoKSB7XHJcbiAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0ID4gMjAwKSB7XHJcbiAgICAgIGhlYWRlci5jbGFzc0xpc3QuYWRkKCdoZWFkZXJfZml4ZWQnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKCdoZWFkZXJfZml4ZWQnKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmhlYWRlcl9maXgoKTsiLCJcclxuZnVuY3Rpb24gaG92ZXJfYmdfaW1nKCkge1xyXG4gIHZhciBzbGlkZV9ib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaG92ZXItaW1nLWJnJyk7XHJcblxyXG4gIHNsaWRlX2JveC5vbm1vdXNlZG93biA9ICgpPT4ge1xyXG4gICAgc2xpZGVfYm94Lm9ubW91c2Vtb3ZlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgdmFyIHggPSBlLm9mZnNldFg7XHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ob3Zlci1pbWctYmdfX2JveCcpLnN0eWxlLndpZHRoID0geCArICdweCc7XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIHNsaWRlX2JveC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBmdW5jdGlvbiAoZV8xKSB7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaG92ZXItaW1nLWJnX19ib3gnKS5zdHlsZS53aWR0aCA9IGVfMS50b3VjaGVzWzBdLnBhZ2VYICsgJ3B4JztcclxuICAgIHNsaWRlX2JveC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIGZ1bmN0aW9uIChlXzIpIHtcclxuICAgICAgdmFyIHggPSBlXzIudG91Y2hlc1swXS5wYWdlWDtcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhvdmVyLWltZy1iZ19fYm94Jykuc3R5bGUud2lkdGggPSB4ICsgJ3B4JztcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBzbGlkZV9ib3gub25tb3VzZXVwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgc2xpZGVfYm94Lm9ubW91c2Vtb3ZlID0gbnVsbDtcclxuICB9O1xyXG5cclxuICBzbGlkZV9ib3gub25tb3VzZWxlYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgc2xpZGVfYm94Lm9ubW91c2Vtb3ZlID0gbnVsbDtcclxuICB9O1xyXG59XHJcblxyXG5ob3Zlcl9iZ19pbWcoKTtcclxuO1xyXG4iLCJmdW5jdGlvbiBsb2NhbGl6YXRpb24oKXtcclxuXHJcblx0bGV0IGxzID0gd2luZG93LmxvY2FsU3RvcmFnZTtcclxuXHJcblx0aWYoIWxzLnBhbmRlbW9uaXVtX2xhbmcpe1xyXG5cdFx0bHMuc2V0SXRlbSgncGFuZGVtb25pdW1fbGFuZycsICdlbicpO1xyXG5cdFx0Y2hlY2tfbGFuZygpO1xyXG5cdH1lbHNle1xyXG5cdFx0Y2hlY2tfbGFuZygpO1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHRmdW5jdGlvbiBjaGVja19sYW5nKCl7XHJcblx0XHRsZXQgX2xhbmcgPSBscy5wYW5kZW1vbml1bV9sYW5nO1xyXG5cclxuXHRcdGZvcihsZXQga2V5IGluIGNvbnRlbnQpe1xyXG5cdFx0XHRsZXQgZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGAubG5nLSR7a2V5fWApO1xyXG5cclxuXHRcdFx0ZWxlbXMuZm9yRWFjaChlbD0+e1xyXG5cdFx0XHRcdGlmKGVsICYmIGNvbnRlbnRba2V5XVtfbGFuZ10pIGVsLmlubmVySFRNTCA9IGNvbnRlbnRba2V5XVtfbGFuZ107XHJcblx0XHRcdFx0ZWxzZSBjb25zb2xlLmxvZygnZXJyJywgY29udGVudFtrZXldKTtcclxuXHRcdFx0fSlcdFx0XHRcclxuXHRcdH1cclxuXHJcblx0XHRsbmdfcm9hZG1hcChfbGFuZyk7XHJcblx0XHRsbmdfcGFja3MoX2xhbmcpO1xyXG5cdFx0bG5nX3RlYW0oX2xhbmcpO1xyXG5cdFx0bG5nX2Jlc3RpYXJ5KF9sYW5nKTtcclxuXHRcdGxuZ19sb3JlKF9sYW5nKVxyXG5cdFx0bG5nX21hcF96b25lKF9sYW5nKTtcclxuXHJcblx0fVxyXG5cclxuXHJcblxyXG4vKl9fX19fX19fX2Z1bmNzX19fX19fX19fX19fX18qL1xyXG5cclxuXHJcblx0ZnVuY3Rpb24gbG5nX3JvYWRtYXAobGFuZyl7XHJcblx0XHRcdGlmKG1fcm9hZG1hcCl7XHJcblx0XHRcdFx0bGV0IHJvYWRzID0gbV9yb2FkbWFwO1xyXG5cdFx0XHRcdGxldCBkYXRhID0gZGF0YV9yb2FkbWFwLnJvYWRtYXA7XHJcblxyXG5cdFx0XHRcdHJvYWRzLmZvckVhY2goKHJvYWQsIGkpPT57XHJcblx0XHRcdFx0XHRsZXQgcm9hZF9kYXRlID0gcm9hZC5xdWVyeVNlbGVjdG9yKCcuZGF0ZScpO1xyXG5cdFx0XHRcdFx0bGV0IHJvYWRfbmFtZSA9IHJvYWQucXVlcnlTZWxlY3RvcignLm5hbWUnKTtcclxuXHRcdFx0XHRcdGxldCByb2FkX2xpc3QgPSByb2FkLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyk7XHJcblxyXG5cdFx0XHRcdFx0aWYoZGF0YVtpXSl7XHJcblx0XHRcdFx0XHRcdHJvYWRfZGF0ZS50ZXh0Q29udGVudCA9IGRhdGFbaV1bbGFuZ10uZGF0ZTtcclxuXHRcdFx0XHRcdFx0cm9hZF9uYW1lLnRleHRDb250ZW50ID0gZGF0YVtpXVtsYW5nXS50aXRsZTtcclxuXHJcblx0XHRcdFx0XHRcdHJvYWRfbGlzdC5mb3JFYWNoKChlbCwgaW5kZXggKSA9PiBlbC50ZXh0Q29udGVudCA9IGRhdGFbaV1bbGFuZ10ubGlzdFtpbmRleF0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gbG5nX3BhY2tzKGxhbmcpe1xyXG5cdFx0aWYobV9wYWNrXzEgJiYgbV9wYWNrXzIpe1xyXG5cdFx0XHRsZXQgcGFja3MgPSBbXHJcblx0XHRcdFx0e2RvbTptX3BhY2tfMSwgZGF0YTpkYXRhX3BhY2tfMS5wYWNrXzF9LFxyXG5cdFx0XHRcdHtkb206bV9wYWNrXzIsIGRhdGE6ZGF0YV9wYWNrXzIucGFja18yfVxyXG5cdFx0XHRdO1xyXG5cclxuXHRcdFx0cGFja3MuZm9yRWFjaChlbCA9PiBhZGRfbGFuZyhlbCkpXHJcblxyXG5cdFx0XHRmdW5jdGlvbiBhZGRfbGFuZyhpbmZvKXtcclxuXHRcdFx0XHRpbmZvLmRvbS5mb3JFYWNoKChlbCwgaSk9PntcclxuXHRcdFx0XHRcdGxldCB0aXRsZSA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy50aXRsZScpO1xyXG5cdFx0XHRcdFx0bGV0IHRleHQgPSBlbC5xdWVyeVNlbGVjdG9yKCcudGV4dCcpO1xyXG5cclxuXHRcdFx0XHRcdGlmKGluZm8uZGF0YVtpXSkge1xyXG5cdFx0XHRcdFx0XHR0aXRsZS50ZXh0Q29udGVudCA9IGluZm8uZGF0YVtpXVtsYW5nXS50aXRsZTtcclxuXHRcdFx0XHRcdFx0dGV4dC50ZXh0Q29udGVudCA9IGluZm8uZGF0YVtpXVtsYW5nXS50ZXh0O1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9KVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzbGlkZXJfMS5yZWZyZXNoKCk7XHJcblx0XHRcdHNsaWRlcl8yLnJlZnJlc2goKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gbG5nX3RlYW0obGFuZyl7XHJcblx0XHRpZihtX3RlYW0pe1xyXG5cdFx0XHRsZXQgdGVhbSA9IG1fdGVhbTtcclxuXHRcdFx0bGV0IGRhdGEgPSBkYXRhX3RlYW0udGVhbTtcclxuXHJcblx0XHRcdHRlYW0uZm9yRWFjaCgoZWwsIGkpPT57XHJcblx0XHRcdFx0bGV0IG5hbWUgPSBlbC5xdWVyeVNlbGVjdG9yKCcubmFtZScpO1xyXG5cdFx0XHRcdGxldCB3b3JrID0gZWwucXVlcnlTZWxlY3RvcignLndvcmsnKTtcclxuXHRcdFx0XHRsZXQgdGV4dCA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy50ZXh0Jyk7XHJcblxyXG5cdFx0XHRcdGlmKGRhdGFbaV0pe1xyXG5cdFx0XHRcdFx0bmFtZS50ZXh0Q29udGVudCA9IGRhdGFbaV1bbGFuZ10ubmFtZTtcclxuXHRcdFx0XHRcdHdvcmsudGV4dENvbnRlbnQgPSBkYXRhW2ldW2xhbmddLndvcms7XHJcblx0XHRcdFx0XHR0ZXh0LmlubmVySFRNTCA9IGRhdGFbaV1bbGFuZ10uYWJvdXQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gbG5nX2Jlc3RpYXJ5KGxhbmcpe1xyXG5cdFx0aWYobV9iZXN0aWFyeV9wYWNrXzEgJiYgbV9iZXN0aWFyeV9wYWNrXzIpe1xyXG5cdFx0XHRsZXQgcGFja3MgPSBbXHJcblx0XHRcdFx0e2RvbTptX2Jlc3RpYXJ5X3BhY2tfMSwgZGF0YTpkYXRhX3BhY2tfMS5wYWNrXzF9LFxyXG5cdFx0XHRcdHtkb206bV9iZXN0aWFyeV9wYWNrXzIsIGRhdGE6ZGF0YV9wYWNrXzIucGFja18yfVxyXG5cdFx0XHRdO1xyXG5cclxuXHRcdFx0cGFja3MuZm9yRWFjaChlbCA9PiBhZGRfbGFuZyhlbCkpXHJcblxyXG5cdFx0XHRmdW5jdGlvbiBhZGRfbGFuZyhpbmZvKXtcclxuXHRcdFx0XHRsZXQgbGlzdCA9IGluZm8uZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyk7XHJcblxyXG5cclxuXHRcdFx0XHRsaXN0LmZvckVhY2goKGVsLCBpKT0+e1xyXG5cdFx0XHRcdFx0bGV0IHRpdGxlID0gZWwucXVlcnlTZWxlY3RvcignLnRpdGxlJyk7XHJcblx0XHRcdFx0XHRsZXQgdGV4dCA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy50ZXh0Jyk7XHJcblxyXG5cdFx0XHRcdFx0aWYoaW5mby5kYXRhW2ldKSB7XHRcclxuXHRcdFx0XHRcdFx0bGV0IGRhdGEgPSBcdGluZm8uZGF0YVtpXVtsYW5nXTtcdFx0XHRcclxuXHJcblx0XHRcdFx0XHRcdHRleHQuaW5uZXJIVE1MID0gZGF0YS5iZXN0aWFyeS50ZXh0O1xyXG5cclxuXHRcdFx0XHRcdFx0aWYoIWRhdGEuYmVzdGlhcnkudGl0bGUgfHwgZGF0YS5iZXN0aWFyeS50aXRsZSA9PT0gXCJcIil7XHJcblx0XHRcdFx0XHRcdFx0dGl0bGUudGV4dENvbnRlbnQgPSBkYXRhLnRpdGxlO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2UgdGl0bGUudGV4dENvbnRlbnQgPSBkYXRhLmJlc3RpYXJ5LnRpdGxlO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9KVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBsbmdfbG9yZShsYW5nKXtcclxuXHRcdGlmKG1fbG9yZSl7XHJcblx0XHRcdGxldCBsb3JlID0gbV9sb3JlO1xyXG5cdFx0XHRsZXQgZGF0YSA9IGRhdGFfbG9yZS5sb3JlO1xyXG5cclxuXHRcdFx0bG9yZS5mb3JFYWNoKChlbCwgaSk9PntcclxuXHRcdFx0XHRsZXQgdGl0bGUgPSBlbC5xdWVyeVNlbGVjdG9yKCcudGl0bGUnKTtcclxuXHRcdFx0XHRsZXQgcGxhY2Vob2xkZXIgPSBlbC5xdWVyeVNlbGVjdG9yKCcubG9yZS1wbGFjZWhvbGRlcicpO1xyXG5cdFx0XHRcdGxldCB0ZXh0X2FsbCA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5sb3JlLXRleHQnKTtcclxuXHJcblx0XHRcdFx0dGl0bGUudGV4dENvbnRlbnQgPSBkYXRhW2ldW2xhbmddLnRpdGxlO1xyXG5cclxuXHRcdFx0XHRpZihwbGFjZWhvbGRlciAmJiBkYXRhW2ldW2xhbmddLnBsYWNlaG9sZGVyKSB7XHJcblx0XHRcdFx0XHRwbGFjZWhvbGRlci50ZXh0Q29udGVudCA9IGRhdGFbaV1bbGFuZ10ucGxhY2Vob2xkZXJcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHRleHRfYWxsLmZvckVhY2goKHAsaWR4KT0+e1xyXG5cdFx0XHRcdFx0bGV0IHRleHQgPSBkYXRhW2ldW2xhbmddLnRleHRbaWR4XTtcclxuXHRcdFx0XHRcdGlmKHRleHQpIHAudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG5cdFx0XHRcdH0pXHJcblxyXG5cdFx0XHR9KVxyXG5cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cclxuXHRmdW5jdGlvbiBsbmdfbWFwX3pvbmUoKXtcclxuXHRcdGlmKGRhdGFfbG9yZSl7XHJcblx0XHRcdGxldCBsYW5nID0gd2luZG93LmxvY2FsU3RvcmFnZS5wYW5kZW1vbml1bV9sYW5nO1xyXG5cdFx0XHRsZXQgbmFtZV96b25lcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tYXAtem9uZV9fbmFtZScpO1xyXG5cclxuXHRcdFx0bmFtZV96b25lcy5mb3JFYWNoKChlbCwgaSk9PntcclxuXHRcdFx0XHRlbC50ZXh0Q29udGVudCA9IGRhdGFfbG9yZS5sb3JlW2ldW2xhbmddLnRpdGxlO1xyXG5cdFx0XHR9KVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLypfX19fX19fX2J0bnNfX19fKi9cclxuXHJcbmZ1bmN0aW9uIGxvY2FsaXphdGlvbl9idG5zKCl7XHJcblxyXG5cdGNvbnN0IGJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubG5nLWJ0bicpO1xyXG5cdGNvbnN0IHNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idG5zLWxhbmdfX3NlbGVjdCcpO1xyXG5cclxuXHJcblxyXG5cdHNlbGVjdC5vbmNsaWNrID0gKCk9PntcclxuXHRcdHNlbGVjdC5wYXJlbnROb2RlLmNsYXNzTGlzdC50b2dnbGUoJ19hY3RpdmUnKTtcclxuXHR9XHJcblxyXG5cdGJ0bnMuZm9yRWFjaChlbCA9PntcclxuXHRcdGVsLm9uY2xpY2sgPSAoKT0+e1xyXG5cdFx0XHRscy5wYW5kZW1vbml1bV9sYW5nID0gZWwuZGF0YXNldC5sYW5nO1xyXG5cdFx0XHQvL2xvY2F0aW9uLnJlbG9hZCgpO1xyXG5cdFx0XHRjaGVja19sYW5nKCk7XHJcblx0XHRcdHNlbGVjdC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ19hY3RpdmUnKTtcclxuXHJcblx0XHRcdGZsYWcoKTtcclxuXHRcdH1cclxuXHR9KVxyXG5cclxuXHRmdW5jdGlvbiBmbGFnKCl7XHJcblx0XHRsZXQgc3ZnID0gc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJ3VzZScpO1xyXG5cdFx0bGV0IHNyYyA9IHN2Zy5nZXRBdHRyaWJ1dGUoJ3hsaW5rOmhyZWYnKTtcclxuXHJcblx0ICBzcmMgPSBzcmMuc3Vic3RyKDAsIHNyYy5sZW5ndGgtMik7XHJcblx0ICBzcmMrPSBscy5wYW5kZW1vbml1bV9sYW5nO1xyXG5cclxuXHQgIHN2Zy5zZXRBdHRyaWJ1dGUoJ3hsaW5rOmhyZWYnLCBzcmMpXHJcblx0fVxyXG5cclxuXHRmbGFnKCk7XHJcblxyXG59XHJcbmxvY2FsaXphdGlvbl9idG5zKCk7XHJcblxyXG5cclxufVxyXG5cclxuXHJcblxyXG5sb2NhbGl6YXRpb24oKTtcclxuXHJcbnNldFRpbWVvdXQobG9jYWxpemF0aW9uLCA1MDAwKTtcclxuXHJcbiIsImZ1bmN0aW9uIG1hcCgpe1xyXG5cdGNvbnN0IG1hcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYXAnKTtcclxuXHRjb25zdCB6b25lcyA9IG1hcC5xdWVyeVNlbGVjdG9yQWxsKCcubWFwLXpvbmVfX2VsJyk7XHJcblx0Y29uc3QgaW1hZ2VzID0gbWFwLnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZy5fZml4Jyk7XHJcblxyXG5cclxuXHJcblx0em9uZXMuZm9yRWFjaCgoZWwsIGkpPT57XHJcblx0XHRsZXQgcG9pbnQgPSBlbC5wYXJlbnROb2RlLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihgLm1hcC1wb2ludHNfX3BvaW50Ll8ke2krMX1gKTtcclxuXHJcblx0XHRwb2ludC5vbmNsaWNrID0gKGUpPT4ge1xyXG5cdFx0XHRcdGlmKGRhdGFfbG9yZSkgbWFwX21vZGFsKGRhdGFfbG9yZS5sb3JlW2ldLmlkLCBlKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdGlmKHdpbmRvdy5pbm5lcldpZHRoID4gODAwKXtcclxuXHRcdFx0ZWwub25tb3VzZW92ZXIgPSAoKT0+IGFkZF9jbGFzcyhlbCwgaSk7XHJcblx0XHRcdGVsLm9ubW91c2VvdXQgPSAoKT0+IHJlbW92ZV9jbGFzcyhlbCwgaSk7XHJcblx0XHRcdGFkZF9uYW1lc196b25lKGVsLCBpKTtcclxuXHJcblx0XHRcdGVsLm9uY2xpY2sgPSAoZSk9PiB7XHJcblx0XHRcdFx0aWYoZGF0YV9sb3JlKSBtYXBfbW9kYWwoZGF0YV9sb3JlLmxvcmVbaV0uaWQsIGUpO1xyXG5cdFx0XHR9O1xyXG5cdFx0fWVsc2V7XHRcdFx0XHJcblx0XHRcdGVsLm9udG91Y2hzdGFydCA9ICgpPT4gYWRkX2NsYXNzKGVsLCBpKTtcclxuXHRcdFx0ZWwub250b3VjaGVuZCA9ICgpPT4gcmVtb3ZlX2NsYXNzKGVsLCBpKTtcclxuXHRcdH1cclxuXHR9KVxyXG5cclxuXHJcblx0ZnVuY3Rpb24gYWRkX2NsYXNzKGl0ZW0sIGluZGV4KXtcclxuXHRcdGltYWdlc1tpbmRleF0uY2xhc3NMaXN0LmFkZCgnX2FjdGl2ZScpO1xyXG5cdFx0aXRlbS5jbGFzc0xpc3QuYWRkKCdfYWN0aXZlJyk7XHJcblx0XHRyZXR1cm4gZmFsc2VcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHJlbW92ZV9jbGFzcyhpdGVtLCBpbmRleCl7XHJcblx0XHRpbWFnZXMuZm9yRWFjaChlbD0+IGVsLmNsYXNzTGlzdC5yZW1vdmUoJ19hY3RpdmUnKSk7XHJcblx0XHRpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ19hY3RpdmUnKTtcclxuXHRcdHJldHVybiBmYWxzZVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gYWRkX25hbWVzX3pvbmUoZWwsIGkpe1xyXG5cclxuXHRcdGxldCBjaGVja19sb3JlX2dldCA9IHNldEludGVydmFsKCgpPT57XHJcblx0XHRcdGlmKGRhdGFfbG9yZSl7XHJcblx0XHRcdFx0bGV0IGxhbmcgPSB3aW5kb3cubG9jYWxTdG9yYWdlLnBhbmRlbW9uaXVtX2xhbmc7XHJcblx0XHRcdFx0bGV0IG5hbWUgPSBlbC5xdWVyeVNlbGVjdG9yKCcubWFwLXpvbmVfX25hbWUnKTtcclxuXHJcblx0XHRcdFx0bmFtZS50ZXh0Q29udGVudCA9IGRhdGFfbG9yZS5sb3JlW2ldW2xhbmddLnRpdGxlO1xyXG5cclxuXHRcdFx0XHRjbGVhckludGVydmFsKGNoZWNrX2xvcmVfZ2V0KTtcclxuXHRcdFx0fVxyXG5cdFx0fSwxMDApXHJcblx0fVxyXG5cclxuXHJcbn1cclxuXHJcbm1hcCgpO1xyXG5cclxuXHJcblxyXG5mdW5jdGlvbiAgbWFwX21vZGFsKGlkLCBldmVudCl7XHJcblx0aWYoaWQpe1xyXG5cdFx0Y29uc3QgbW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFwLW1vZGFsJyk7XHJcblx0XHRjb25zdCBvdmVybGF5ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1hcC1tb2RhbF9fb3ZlcmxheScpO1xyXG5cdFx0Y29uc3QgYnRuID0gbW9kYWwucXVlcnlTZWxlY3RvcignLmJ0bi1tb3JlJyk7XHJcblx0XHRjb25zdCByZW1vdmVfYnRuID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnJlbW92ZScpO1xyXG5cclxuXHRcdHJlbW92ZV9idG4ub25jbGljayA9ICgpPT57XHJcblx0XHRcdG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ19hY3RpdmUnKTtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgbGFuZyA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UucGFuZGVtb25pdW1fbGFuZztcclxuXHJcblx0XHRsZXQgbV90aXRsZSA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy50aXRsZScpO1xyXG5cdFx0bGV0IG1fdGV4dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5sb3JlLXRleHQnKTtcclxuXHJcblx0XHRsZXQgdGl0bGUgPSAnJztcclxuXHRcdGxldCB0ZXh0ID0gJyc7XHJcblxyXG5cdFx0ZGF0YV9sb3JlLmxvcmUuZm9yRWFjaChlbD0+e1xyXG5cdFx0XHRpZihlbC5pZCA9PSBpZCl7XHJcblx0XHRcdFx0dGl0bGUgPSBlbFtsYW5nXS50aXRsZTtcclxuXHRcdFx0XHR0ZXh0ID0gZWxbbGFuZ10udGV4dFswXTtcclxuXHRcdFx0fVxyXG5cdFx0fSApXHJcblxyXG5cclxuXHJcblx0XHRtX3RpdGxlLnRleHRDb250ZW50ID0gdGl0bGU7XHJcblx0XHRtX3RleHQudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG5cclxuXHJcblx0XHRtb2RhbC5jbGFzc0xpc3QuYWRkKCdfYWN0aXZlJyk7XHJcblxyXG5cdFx0YnRuLm9uY2xpY2sgPSAoZSk9PiB7XHJcblx0XHRcdG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ19hY3RpdmUnKTtcclxuXHJcblx0XHRcdGxldCBhbGxfaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb3JlJykub2Zmc2V0SGVpZ2h0O1xyXG5cdFx0XHRsZXQgcG9zXzEgPSBldmVudC5wYWdlWTtcclxuXHRcdFx0bGV0IHBvc18yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7aWR9YCkub2Zmc2V0VG9wO1xyXG5cclxuXHRcdFx0bGV0IGNlbnRlciA9IGV2ZW50LmNsaWVudFkgLSAod2luZG93LmlubmVySGVpZ2h0LzIpO1xyXG5cdFx0XHRcclxuXHRcdFx0bGV0IHVwID0gKHdpbmRvdy5pbm5lckhlaWdodCozNikvMTAwO1xyXG5cclxuXHJcblx0XHRcdGxldCBzY3JvbGwgPSAoKHBvc18yIC0gcG9zXzEpICsgY2VudGVyKSt1cDtcclxuXHRcdFx0d2luZG93LnNjcm9sbEJ5KHtcclxuXHRcdFx0XHR0b3A6IHNjcm9sbCxcclxuXHRcdFx0XHRsZWZ0OjAsXHJcblx0XHRcdFx0YmVoYXZpb3I6IFwic21vb3RoXCJcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0fTtcclxuXHRcdG92ZXJsYXkub25jbGljayA9ICgpPT4ge21vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ19hY3RpdmUnKX07XHJcblx0fVx0XHJcblxyXG59IiwiXHJcbiAgdmFyIHNsaWRlcl8xID0gbmV3IFNwbGlkZSgnI3NsaWRlci1jYXJkc18xJywge1xyXG4gICAgcGVyUGFnZTogNCxcclxuICAgIHBlck1vdmU6IDEsXHJcbiAgICBhcnJvd3M6IGZhbHNlLFxyXG4gICAgdHlwZTogJ2xvb3AnLFxyXG4gICAgcGFnaW5hdGlvbjogdHJ1ZSxcclxuICAgIGF1dG9wbGF5OiB0cnVlXHJcbiAgfSkubW91bnQoKTtcclxuICAvKl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyovXHJcblxyXG4gIHZhciBzbGlkZXJfMiA9IG5ldyBTcGxpZGUoJyNzbGlkZXItY2FyZHNfMicsIHtcclxuICAgIHBlclBhZ2U6IDQsXHJcbiAgICBwZXJNb3ZlOiAxLFxyXG4gICAgYXJyb3dzOiBmYWxzZSxcclxuICAgIHR5cGU6ICdsb29wJyxcclxuICAgIHBhZ2luYXRpb246IHRydWUsXHJcbiAgICBhdXRvcGxheTogdHJ1ZVxyXG4gIH0pLm1vdW50KCk7XHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBhZGRDYXJkKHNsaWRlcl9zcGxpZGUsIHNsaWRlcl9pZCwgcGFja19uYW1lLCBwYWNrKXtcclxuICBjb25zdCBzbGlkZXIgPSBzbGlkZXJfc3BsaWRlO1xyXG4gIGNvbnN0IHNsaWRlcl9saXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzbGlkZXJfaWQpLnF1ZXJ5U2VsZWN0b3IoJy5zcGxpZGVfX2xpc3QnKTtcclxuICBjb25zdCBzbGlkZXJfc2xpZGVzID0gc2xpZGVyX2xpc3QucXVlcnlTZWxlY3RvckFsbCgnLnNwbGlkZV9fc2xpZGUnKTtcclxuICBzbGlkZXJfc2xpZGVzLmZvckVhY2goZWw9PiBlbC5yZW1vdmUoKSlcclxuXHJcbiAgbGV0IF9sYW5nID0gJyc7XHJcblxyXG4gIGZfY2hlY2tfbGFuZygpO1xyXG5cclxuICBwYWNrLmZvckVhY2goKGVsKT0+e1xyXG4gICAgc2xpZGVyLmFkZChcclxuICAgICAgYDxsaSBjbGFzcz1cInNwbGlkZV9fc2xpZGVcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImZsaXBcIj5cclxuICAgICAgICAgICAgPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCIuL2Fzc2V0cy9pY29ucy9zdmcvc3ByaXRlLnN2ZyNmbGlwXCI+PC91c2U+PC9zdmc+XHJcbiAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmcm9udFwiPlxyXG4gICAgICAgICAgICA8aW1nIHNyYz1cIi4vYXNzZXRzL2ltYWdlcy8ke3BhY2tfbmFtZX0vJHtlbC5pbWd9LnBuZ1wiLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJhY2tcIj5cclxuICAgICAgICAgICAgPGltZyBzcmM9XCIuL2Fzc2V0cy9pbWFnZXMvJHtwYWNrX25hbWV9LyR7ZWwuaW1nfS5wbmdcIi8+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJiYWNrX19ibG9ja1wiPlxyXG4gICAgICAgICAgICAgIDxoNSBjbGFzcz1cInRpdGxlXCI+JHtlbFtfbGFuZ10udGl0bGV9PC9oNT5cclxuICAgICAgICAgICAgICA8cCBjbGFzcz1cInRleHQgc2Nyb2xsXzFcIj4ke2VsW19sYW5nXS50ZXh0fTwvcD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9saT4+YFxyXG4gICAgICApXHJcbiAgfSkgIFxyXG5cclxuXHJcbiAgYnRuX2ZsaXAoKTtcclxuXHJcbiAgZnVuY3Rpb24gZl9jaGVja19sYW5nKCl7XHJcbiAgICBsZXQgbHMgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xyXG5cclxuICAgIGlmKCFscy5wYW5kZW1vbml1bV9sYW5nKXtcclxuICAgICAgbHMuc2V0SXRlbSgncGFuZGVtb25pdW1fbGFuZycsICdlbicpO1xyXG4gICAgICBfbGFuZyA9IGxzLnBhbmRlbW9uaXVtX2xhbmc7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgX2xhbmcgPSBscy5wYW5kZW1vbml1bV9sYW5nO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59XHJcblxyXG5cclxuLypfX19fY2FyZF9mbGlwKi9cclxuXHJcbmZ1bmN0aW9uIGJ0bl9mbGlwKCl7XHJcbiAgY29uc3QgYnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mbGlwJyk7XHJcblxyXG4gIGJ0bnMuZm9yRWFjaCgoYnRuKT0+e1xyXG4gICAgYnRuLm9uY2xpY2sgPSAoKT0+e1xyXG4gICAgICBsZXQgY2FyZCA9IGJ0bi5wYXJlbnROb2RlO1xyXG4gICAgICBjYXJkLmNsYXNzTGlzdC50b2dnbGUoJ19hY3RpdmUnKTtcclxuICAgIH1cclxuICB9KSBcclxufVxyXG5cclxuIiwiZnVuY3Rpb24gYWRkX3JvYWRtYXAoKXtcclxuXHJcblx0Y29uc3Qgcm9hZG1hcF9jb250ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3JvYWRtYXBfY29udCcpO1xyXG5cclxuXHRsZXQgX2xhbmcgPSAnJztcclxuIFx0Zl9jaGVja19sYW5nKCk7XHJcblxyXG5cclxuXHRkYXRhX3JvYWRtYXAucm9hZG1hcC5mb3JFYWNoKChlbCwgaSk9PntcclxuXHRcdGxldCBodG1sID0gJyc7XHJcblxyXG5cdFx0bGV0IGZpcnN0ID0gIGA8ZGl2IGNsYXNzPVwicm9hZFwiIGRhdGEtYW9zPlxyXG5cdFx0XHQ8ZGl2IGNsYXNzPVwicm9hZF9fYmxvY2tcIj5cclxuXHRcdFx0XHQ8aDMgY2xhc3M9XCJkYXRlXCI+JHtlbFtfbGFuZ10uZGF0ZX08L2gzPlxyXG5cdFx0XHRcdDxoNSBjbGFzcz1cIm5hbWVcIj4ke2VsW19sYW5nXS50aXRsZX08L2g1PlxyXG5cdFx0XHRcdDx1bCBjbGFzcz1cInJvYWRfX2xpc3RcIj5gO1xyXG5cclxuXHRcdGxldCBsaXN0ID0gJyc7XHJcblxyXG5cdFx0bGV0IGVuZCA9IGA8L3VsPlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdFx0PGRpdiBjbGFzcz1cInBvaW50XCIgc3R5bGU9XCJiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTI1ZGVnLCAke2VsLmNvbG9ycy5fMX0gMCUsICR7ZWwuY29sb3JzLl8yfSAxMDAlKTtcIj5cclxuXHRcdFx0XHQ8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIi4vYXNzZXRzL2ljb25zL3N2Zy9zcHJpdGUuc3ZnI2Fycm93c1wiPjwvdXNlPjwvc3ZnPlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdDwvZGl2PmBcclxuXHJcblxyXG5cdFx0aWYoZWxbX2xhbmddLmxpc3QpIGVsW19sYW5nXS5saXN0LmZvckVhY2goaXRlbSA9PiBsaXN0ICs9IGA8bGkgY2xhc3M9XCJyb2FkX19lbFwiPiR7aXRlbX08L2xpPmApXHJcblxyXG5cdFx0aHRtbCA9IGZpcnN0K2xpc3QrZW5kO1xyXG5cclxuXHRcdHJvYWRtYXBfY29udC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZUVuZCcsIGh0bWwpXHJcblx0fSlcclxuXHJcblx0XHJcblx0ZnVuY3Rpb24gZl9jaGVja19sYW5nKCl7XHJcblx0ICBsZXQgbHMgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xyXG5cclxuXHQgIGlmKCFscy5wYW5kZW1vbml1bV9sYW5nKXtcclxuXHQgICAgbHMuc2V0SXRlbSgncGFuZGVtb25pdW1fbGFuZycsICdlbicpO1xyXG5cdCAgICBfbGFuZyA9IGxzLnBhbmRlbW9uaXVtX2xhbmc7XHJcblx0ICB9ZWxzZXtcclxuXHQgICAgX2xhbmcgPSBscy5wYW5kZW1vbml1bV9sYW5nO1xyXG5cdCAgfVxyXG5cclxuXHR9XHJcblxyXG5cdEFPUy5yZWZyZXNoO1xyXG5cdFxyXG59IiwiXHJcbnZhciB0ZWFtX3NsaWRlciA9IG5ldyBTcGxpZGUoJy50ZWFtJywge1xyXG4gIHBlclBhZ2U6IDQsXHJcbiAgcGVyTW92ZTogMSxcclxuICBwYWdpbmF0aW9uOiB0cnVlLFxyXG59KS5tb3VudCgpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHRlYW1fYWRkKGRhdGEpe1xyXG4gIGNvbnN0IHRlYW1fbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZWFtJyk7XHJcbiAgY29uc3QgdGVhbV9lbCA9IHRlYW1fbGlzdC5xdWVyeVNlbGVjdG9yQWxsKCcuc3BsaWRlX19zbGlkZScpO1xyXG5cclxuICBsZXQgX2xhbmcgPSAnJztcclxuICBmX2NoZWNrX2xhbmcoKTtcclxuXHJcbiAgdGVhbV9lbC5mb3JFYWNoKGVsID0+IGVsLnJlbW92ZSgpKVxyXG5cclxuXHJcbiAgZGF0YS5mb3JFYWNoKChlbCkgPT4geyBhZGQoZWwpfSlcclxuXHJcbiAgZnVuY3Rpb24gYWRkKGVsKXtcclxuICAgIHRlYW1fc2xpZGVyLmFkZChcclxuICAgICAgYDxsaSBjbGFzcz1cInNwbGlkZV9fc2xpZGUgdGVhbV9fZWxcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidGVhbV9fZWxcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZWFtX19ib3hcIj5cclxuICAgICAgICAgICAgPGltZyBzcmM9XCIuL2Fzc2V0cy9pbWFnZXMvdGVhbS8ke2VsLmltZ30ucG5nXCIgY2xhc3M9XCJpbWdfYlwiLz5cclxuICAgICAgICAgICAgPGltZyBzcmM9XCIuL2Fzc2V0cy9pbWFnZXMvdGVhbS8ke2VsLmltZ31fdy5wbmdcIiBjbGFzcz1cImltZ193XCIvPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5mb1wiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJuYW1lXCI+JHtlbFtfbGFuZ10ubmFtZX08L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwid29ya1wiPiR7ZWxbX2xhbmddLndvcmt9PC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQgc2Nyb2xsXzFcIj4ke2VsW19sYW5nXS5hYm91dH08L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJtb3JlXCI+PC9idXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9saT5gXHJcbiAgICApXHJcbiAgfVxyXG4gIHRlYW1fYnRucygpO1xyXG5cclxuXHJcbiAgZnVuY3Rpb24gZl9jaGVja19sYW5nKCl7XHJcbiAgICBsZXQgbHMgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xyXG5cclxuICAgIGlmKCFscy5wYW5kZW1vbml1bV9sYW5nKXtcclxuICAgICAgbHMuc2V0SXRlbSgncGFuZGVtb25pdW1fbGFuZycsICdlbicpO1xyXG4gICAgICBfbGFuZyA9IGxzLnBhbmRlbW9uaXVtX2xhbmc7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgX2xhbmcgPSBscy5wYW5kZW1vbml1bV9sYW5nO1xyXG4gICAgfVxyXG5cclxuICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiB0ZWFtX2J0bnMoKSB7XHJcbiAgdmFyIGJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubW9yZScpO1xyXG4gIGJ0bnMuZm9yRWFjaChmdW5jdGlvbiAoYnRuKSB7XHJcbiAgICBidG4ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgYnRuLnBhcmVudE5vZGUuY2xhc3NMaXN0LnRvZ2dsZSgnX2FjdGl2ZScpO1xyXG4gICAgfTtcclxuICB9KTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZV90ZWFtKGVsbXMpe1xyXG4gIGVsbXMuZm9yRWFjaCggZWwgPT4gcmVtb3ZlKCkpXHJcbn1cclxuXHJcblxyXG4iLCJmdW5jdGlvbiBhbmNob3JzKCl7XHJcblxyXG5cdGNvbnN0IGFuY2hvcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYVtocmVmKj0nIyddXCIpO1xyXG5cclxuXHRmb3IobGV0IGFuY2hvciBvZiBhbmNob3JzKXtcclxuXHRcdGFuY2hvci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KXtcclxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0Y29uc3QgYmxvY2tJRCA9IGFuY2hvci5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcclxuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignJyArIGJsb2NrSUQpLnNjcm9sbEludG9WaWV3KHtcclxuXHRcdFx0XHRiZWhhdmlvcjogXCJzbW9vdGhcIixcclxuXHRcdFx0XHRibG9jazogXCJzdGFydFwiXHJcblx0XHRcdH0pXHJcblx0XHR9KVxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmFuY2hvcnMoKTsiLCJBT1MuaW5pdCh7XHJcbiAgLy8gR2xvYmFsIHNldHRpbmdzOlxyXG4gIGRpc2FibGU6IGZhbHNlLCAvLyBhY2NlcHRzIGZvbGxvd2luZyB2YWx1ZXM6ICdwaG9uZScsICd0YWJsZXQnLCAnbW9iaWxlJywgYm9vbGVhbiwgZXhwcmVzc2lvbiBvciBmdW5jdGlvblxyXG4gIHN0YXJ0RXZlbnQ6ICdET01Db250ZW50TG9hZGVkJywgLy8gbmFtZSBvZiB0aGUgZXZlbnQgZGlzcGF0Y2hlZCBvbiB0aGUgZG9jdW1lbnQsIHRoYXQgQU9TIHNob3VsZCBpbml0aWFsaXplIG9uXHJcbiAgaW5pdENsYXNzTmFtZTogJ2Fvcy1pbml0JywgLy8gY2xhc3MgYXBwbGllZCBhZnRlciBpbml0aWFsaXphdGlvblxyXG4gIGFuaW1hdGVkQ2xhc3NOYW1lOiAnYW9zLWFuaW1hdGUnLCAvLyBjbGFzcyBhcHBsaWVkIG9uIGFuaW1hdGlvblxyXG4gIHVzZUNsYXNzTmFtZXM6IGZhbHNlLCAvLyBpZiB0cnVlLCB3aWxsIGFkZCBjb250ZW50IG9mIGBkYXRhLWFvc2AgYXMgY2xhc3NlcyBvbiBzY3JvbGxcclxuICBkaXNhYmxlTXV0YXRpb25PYnNlcnZlcjogZmFsc2UsIC8vIGRpc2FibGVzIGF1dG9tYXRpYyBtdXRhdGlvbnMnIGRldGVjdGlvbnMgKGFkdmFuY2VkKVxyXG4gIGRlYm91bmNlRGVsYXk6IDUwLCAvLyB0aGUgZGVsYXkgb24gZGVib3VuY2UgdXNlZCB3aGlsZSByZXNpemluZyB3aW5kb3cgKGFkdmFuY2VkKVxyXG4gIHRocm90dGxlRGVsYXk6IDk5LCAvLyB0aGUgZGVsYXkgb24gdGhyb3R0bGUgdXNlZCB3aGlsZSBzY3JvbGxpbmcgdGhlIHBhZ2UgKGFkdmFuY2VkKVxyXG5cclxuXHJcbiAgLy8gU2V0dGluZ3MgdGhhdCBjYW4gYmUgb3ZlcnJpZGRlbiBvbiBwZXItZWxlbWVudCBiYXNpcywgYnkgYGRhdGEtYW9zLSpgIGF0dHJpYnV0ZXM6XHJcbiAgb2Zmc2V0OiAxMjAsIC8vIG9mZnNldCAoaW4gcHgpIGZyb20gdGhlIG9yaWdpbmFsIHRyaWdnZXIgcG9pbnRcclxuICBkZWxheTogMCwgLy8gdmFsdWVzIGZyb20gMCB0byAzMDAwLCB3aXRoIHN0ZXAgNTBtc1xyXG4gIGR1cmF0aW9uOiA0MDAsIC8vIHZhbHVlcyBmcm9tIDAgdG8gMzAwMCwgd2l0aCBzdGVwIDUwbXNcclxuICBlYXNpbmc6ICdlYXNlJywgLy8gZGVmYXVsdCBlYXNpbmcgZm9yIEFPUyBhbmltYXRpb25zXHJcbiAgb25jZTogZmFsc2UsIC8vIHdoZXRoZXIgYW5pbWF0aW9uIHNob3VsZCBoYXBwZW4gb25seSBvbmNlIC0gd2hpbGUgc2Nyb2xsaW5nIGRvd25cclxuICBtaXJyb3I6IGZhbHNlLCAvLyB3aGV0aGVyIGVsZW1lbnRzIHNob3VsZCBhbmltYXRlIG91dCB3aGlsZSBzY3JvbGxpbmcgcGFzdCB0aGVtXHJcbiAgYW5jaG9yUGxhY2VtZW50OiAndG9wLWJvdHRvbScsIC8vIGRlZmluZXMgd2hpY2ggcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgcmVnYXJkaW5nIHRvIHdpbmRvdyBzaG91bGQgdHJpZ2dlciB0aGUgYW5pbWF0aW9uXHJcblxyXG59KTtcclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgQU9TLnJlZnJlc2gpIiwiXHJcbmZ1bmN0aW9uIG1lZGlhKHNsaWRlcl8xLCBzbGlkZXJfMiwgc2xpZGVyX3RlYW0pe1xyXG5cclxuICAvLyBvcHRpb25zO1xyXG4gICAgbGV0IGxhcmdlID0gZmFsc2U7IGxldCBsYXJfc2xpZGVzID0gNDtcclxuICAgIGxldCBkZXNrdG9wID0gdHJ1ZTsgbGV0IGRfc2xpZGVzID0gMztcclxuICAgIGxldCBsYXB0b3AgPSBmYWxzZTsgIGxldCBsX3NsaWRlcyA9IDI7XHJcbiAgICBsZXQgdGFibGV0ID0gZmFsc2U7IGxldCB0X3NsaWRlcyA9IDE7XHJcbiAgICBsZXQgcGhvbmUgPSBmYWxzZTsgbGV0IHBfc2xpZGVzID0gMTtcclxuXHJcbiAgICB2YXIgc2xpZGVzVG9TaG93ID0gMDtcclxuXHJcbiAgdmFyIG1lZGlhTGFyZ2UgPSB3aW5kb3cubWF0Y2hNZWRpYSgnKG1pbi13aWR0aDogMTI4MHB4KScpXHJcbiAgdmFyIG1lZGlhRGVza3RvcCA9IHdpbmRvdy5tYXRjaE1lZGlhKCcobWF4LXdpZHRoOiAxMjgwcHgpJylcclxuICB2YXIgbWVkaWFMYXB0b3AgPSB3aW5kb3cubWF0Y2hNZWRpYSgnKG1heC13aWR0aDogMTAyNHB4KScpXHJcbiAgdmFyIG1lZGlhVGFibGV0ID0gd2luZG93Lm1hdGNoTWVkaWEoJyhtYXgtd2lkdGg6IDgyMHB4KScpXHJcbiAgdmFyIG1lZGlhUGhvbmUgPSB3aW5kb3cubWF0Y2hNZWRpYSgnKG1heC13aWR0aDogNDgwcHgpJylcclxuXHJcbiAgaWYgKG1lZGlhTGFyZ2UubWF0Y2hlcykge1xyXG4gICAgdGFibGV0ID0gZmFsc2U7IGxhcHRvcCA9IGZhbHNlOyBwaG9uZSA9IGZhbHNlOyBkZXNrdG9wID0gZmFsc2U7XHJcbiAgICBsYXJnZSA9IHRydWU7XHJcbiAgfVxyXG4gIGlmIChtZWRpYURlc2t0b3AubWF0Y2hlcykge1xyXG4gICAgdGFibGV0ID0gZmFsc2U7IGxhcHRvcCA9IGZhbHNlOyBwaG9uZSA9IGZhbHNlOyBsYXJnZSA9IGZhbHNlO1xyXG4gICAgZGVza3RvcCA9IHRydWU7XHJcbiAgfVxyXG4gIGlmIChtZWRpYUxhcHRvcC5tYXRjaGVzKSB7XHJcbiAgICBkZXNrdG9wID0gZmFsc2U7IHRhYmxldCA9IGZhbHNlOyBwaG9uZSA9IGZhbHNlOyBsYXJnZSA9IGZhbHNlO1xyXG4gICAgbGFwdG9wID0gdHJ1ZTtcclxuICB9XHJcbiAgaWYgKG1lZGlhVGFibGV0Lm1hdGNoZXMpIHtcclxuICAgIGRlc2t0b3AgPSBmYWxzZTsgbGFwdG9wID0gZmFsc2U7IHBob25lID0gZmFsc2U7IGxhcmdlID0gZmFsc2U7XHJcbiAgICB0YWJsZXQgPSB0cnVlO1xyXG4gIH1cclxuICBpZiAobWVkaWFQaG9uZS5tYXRjaGVzKSB7XHJcbiAgICAgIHRhYmxldCA9IGZhbHNlOyBsYXB0b3AgPSBmYWxzZTsgZGVza3RvcCA9IGZhbHNlOyBsYXJnZSA9IGZhbHNlO1xyXG4gICAgICBwaG9uZSA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBpZihsYXJnZSl7c2xpZGVzVG9TaG93ID0gbGFyX3NsaWRlc31cclxuICBpZihkZXNrdG9wKXtzbGlkZXNUb1Nob3cgPSBkX3NsaWRlc31cclxuICBpZihsYXB0b3Ape3NsaWRlc1RvU2hvdyA9IGxfc2xpZGVzfVxyXG4gIGlmKHRhYmxldCl7c2xpZGVzVG9TaG93ID0gdF9zbGlkZXN9XHJcbiAgaWYocGhvbmUpe3NsaWRlc1RvU2hvdyA9IHBfc2xpZGVzfVxyXG5cclxuICBzbGlkZXJfMS5vcHRpb25zID0geyBwZXJQYWdlOiBzbGlkZXNUb1Nob3cgfTtcclxuICBzbGlkZXJfMi5vcHRpb25zID0geyBwZXJQYWdlOiBzbGlkZXNUb1Nob3cgfTtcclxuICBzbGlkZXJfdGVhbS5vcHRpb25zID0geyBwZXJQYWdlOiBzbGlkZXNUb1Nob3cgfTtcclxuXHJcbn1cclxuXHJcblxyXG5cclxuXHJcbi8qX19fX19fX19fX19fX19fbWVkaWFfX19fX18qL1xyXG5cclxuXHJcbm1lZGlhKHNsaWRlcl8xLCBzbGlkZXJfMiwgdGVhbV9zbGlkZXIpO1xyXG5cclxuXHJcbndpbmRvdy5vbnJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICBtZWRpYShzbGlkZXJfMSwgc2xpZGVyXzIsIHRlYW1fc2xpZGVyKTtcclxuXHJcbiAgaW1nX3dfcmV6KCk7XHJcbn07XHJcblxyXG4vKmltZ19iZyovXHJcbmZ1bmN0aW9uIGltZ193X3JleigpIHtcclxuICB2YXIgc2xpZGVfYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhvdmVyLWltZy1iZycpO1xyXG4gIHZhciBpbWdzID0gc2xpZGVfYm94LnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpO1xyXG4gIHZhciBib3hfdyA9IHNsaWRlX2JveC5jbGllbnRXaWR0aDtcclxuICBpbWdzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XHJcbiAgICBlbC5zdHlsZS53aWR0aCA9IGAke2JveF93fXB4YDtcclxuICB9KTtcclxufVxyXG5cclxuc2V0SW50ZXJ2YWwoKCk9PntpbWdfd19yZXooKX0sIDUwMClcclxuXHJcbiIsImZ1bmN0aW9uIG15Um91dGVyKCl7XHJcblxyXG5cdGxldCBwYWdlcyA9IHtcclxuXHRcdGJhc2U6IHRydWUsXHJcblx0XHRiZXN0aWFyeTogZmFsc2UsXHJcblx0XHRsb3JlOiBmYWxzZVxyXG5cdH1cclxuXHJcblx0Y29uc3QgbG9jYXRpb25SZXNvbHZlciA9IChsb2NhdGlvbik9PntcclxuXHRcdHN3aXRjaCAobG9jYXRpb24pe1xyXG5cdFx0XHRjYXNlIFwiL1wiOlxyXG5cdFx0XHRcdHBhZ2VBY3RpdmUobG9jYXRpb24pXHJcblx0XHRcdFx0O1xyXG5cdFx0XHRcdGJyZWFrXHJcblx0XHRcdGNhc2UgXCIjL2Jlc3RpYXJ5XCI6XHJcblx0XHRcdFx0cGFnZUFjdGl2ZShsb2NhdGlvbilcclxuXHRcdFx0XHQ7XHJcblx0XHRcdFx0YnJlYWtcclxuXHRcdFx0Y2FzZSBcIiMvbG9yZVwiOlxyXG5cdFx0XHRcdHBhZ2VBY3RpdmUobG9jYXRpb24pXHJcblx0XHRcdFx0O1xyXG5cdFx0XHRcdGJyZWFrXHJcblx0XHRcdFxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblxyXG5cclxuXHQvLyBoYXNoIHdhdGNoZXJcclxuXHJcblx0d2luZG93Lm9uaGFzaGNoYW5nZSA9ICgpPT57XHJcblx0XHRzZXRUaW1lb3V0KCgpPT57XHRcdFxyXG5cdFx0XHRjaGVja0hhc2goKTtcclxuXHJcblx0XHRcdGNoZWNrX2Jlc3RpYXJ5KCk7XHJcblx0XHRcdGNoZWNrX2xvcmUoKTtcclxuXHRcdH0sIDEwMClcclxuXHR9XHJcblxyXG5cclxuXHJcblx0LypfX19fX19fX19mdW5jc19fX19fKi9cclxuXHJcblxyXG5cdGZ1bmN0aW9uIGNoZWNrSGFzaCgpe1x0XHJcblx0XHRjb25zdCBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xyXG5cdFx0aWYobG9jYXRpb24pe1xyXG5cdFx0XHRsb2NhdGlvblJlc29sdmVyKGxvY2F0aW9uKVx0XHRcclxuXHRcdH1cclxuXHRcdGlmKHdpbmRvdy5sb2NhdGlvbi5oYXNoID09IFwiXCIgfHwgd2luZG93LmxvY2F0aW9uLmhhc2ggPT0gXCIvXCIpe1xyXG5cdFx0XHRsZXQgYmFzZV9wYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLmJhc2VgKTtcclxuXHRcdFx0Zm9yKGxldCBpdGVtIGluIHBhZ2VzKXtcclxuXHRcdFx0XHRsZXQgcGFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke2l0ZW19YCk7XHJcblx0XHRcdFx0aWYocGFnZSA9PSBiYXNlX3BhZ2Upe1xyXG5cdFx0XHRcdFx0cGFnZS5jbGFzc0xpc3QuYWRkKCdfYWN0aXZlUGFnZScpO1xyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0cGFnZS5jbGFzc0xpc3QucmVtb3ZlKCdfYWN0aXZlUGFnZScpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRjaGVja0hhc2goKTtcclxuXHJcblxyXG5cdGZ1bmN0aW9uIHBhZ2VBY3RpdmUobG9jYXRpb24pe1xyXG5cdFx0bGV0IG5hbWUgPSBsb2NhdGlvbi5zdWJzdHIoMik7XHJcblx0XHRsZXQgcGFnZV9hY3RpdmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHtuYW1lfWApO1xyXG5cdFx0XHRcclxuXHRcdGZvcihsZXQgaXRlbSBpbiBwYWdlcyl7XHJcblx0XHRcdGxldCBwYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLiR7aXRlbX1gKTtcclxuXHRcdFx0aWYocGFnZSA9PSBwYWdlX2FjdGl2ZSl7XHJcblx0XHRcdFx0cGFnZS5jbGFzc0xpc3QuYWRkKCdfYWN0aXZlUGFnZScpO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRwYWdlLmNsYXNzTGlzdC5yZW1vdmUoJ19hY3RpdmVQYWdlJyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGNoZWNrX2Jlc3RpYXJ5KCl7XHJcblx0XHRsZXQgbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluQ29udGVudCcpO1xyXG5cdFx0XHJcblx0XHRpZih3aW5kb3cubG9jYXRpb24uaGFzaCA9PSAnIy9iZXN0aWFyeScpe1xyXG5cdFx0XHRtYWluLmNsYXNzTGlzdC5hZGQoJ19wYWdlLWJlc3RpYXJ5JylcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRtYWluLmNsYXNzTGlzdC5yZW1vdmUoJ19wYWdlLWJlc3RpYXJ5JylcclxuXHRcdH1cclxuXHR9XHJcblx0Y2hlY2tfYmVzdGlhcnkoKTtcclxuXHJcblxyXG5cdGZ1bmN0aW9uIGNoZWNrX2xvcmUoKXtcclxuXHRcdGxldCBtYWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW5Db250ZW50Jyk7XHJcblx0XHRcclxuXHRcdGlmKHdpbmRvdy5sb2NhdGlvbi5oYXNoID09ICcjL2xvcmUnKXtcclxuXHRcdFx0bWFpbi5jbGFzc0xpc3QuYWRkKCdfcGFnZS1sb3JlJylcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRtYWluLmNsYXNzTGlzdC5yZW1vdmUoJ19wYWdlLWxvcmUnKVxyXG5cdFx0fVxyXG5cdH1cclxuXHRjaGVja19sb3JlKCk7XHJcblxyXG5cclxufVxyXG5cclxuXHJcbm15Um91dGVyKCk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gYnRucygpe1xyXG5cdGxldCBob21lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBhZ2UtYnRuc19ob21lJyk7XHJcblx0bGV0IGJlc3RpYXJ5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBhZ2UtYnRuc19iZXN0aWFyeScpO1xyXG5cdGxldCBsb3JlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBhZ2UtYnRuc19sb3JlJyk7XHJcblxyXG5cclxuXHRob21lLmZvckVhY2goZWw9PiBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XHRcclxuXHRcdHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJyc7XHJcblx0fSkpXHJcblxyXG5cdGJlc3RpYXJ5LmZvckVhY2goZWw9PiBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XHRcclxuXHRcdHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJyMvYmVzdGlhcnknO1xyXG5cdH0pKVxyXG5cdGxvcmUuZm9yRWFjaChlbD0+IGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcdFxyXG5cdFx0d2luZG93LmxvY2F0aW9uLmhhc2ggPSAnIy9sb3JlJztcclxuXHR9KSlcclxuXHJcbn1cclxuYnRucygpO1xyXG4iLCJmdW5jdGlvbiBwcmVsb2FkaW5nKCl7XHJcbiAgbGV0IHByZWxvYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcmVsb2FkaW5nJyk7XHJcblxyXG4gIHByZWxvYWRlci5jbGFzc0xpc3QuYWRkKCdfYWN0aXZlJyk7XHJcblxyXG4gIHNldFRpbWVvdXQoKCk9PntcclxuICAgIHByZWxvYWRlci5jbGFzc0xpc3QucmVtb3ZlKCdfYWN0aXZlJyk7XHJcbiAgfSwgNDAwMClcclxuXHJcbn1cclxuXHJcblxyXG5wcmVsb2FkaW5nKCk7IiwiZnVuY3Rpb24gc2VuZFJlcXVlc3QobWV0aG9kLCB1cmwpe1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xyXG4gICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcblxyXG4gICAgeGhyLm9wZW4obWV0aG9kLCB1cmwpO1xyXG5cclxuICAgIHhoci5yZXNwb25zZVR5cGUgPSAnanNvbic7XHJcblxyXG4gICAgeGhyLm9ubG9hZCA9ICgpID0+e1xyXG4gICAgICBpZih4aHIuc3RhdHVzID49IDQwMCl7XHJcbiAgICAgICAgcmVqZWN0KHhoci5yZXNwb25zZSk7XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIHJlc29sdmUoeGhyLnJlc3BvbnNlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHhoci5vbmVycm9yID0gKCkgPT57XHJcbiAgICAgIHJlamVjdCh4aHIucmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB4aHIuc2VuZCgpO1xyXG4gIH0pXHJcbn0iXX0=
