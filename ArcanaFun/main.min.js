"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

;
/*_______src________req*/

var d_roadmap = './resources/data/roadmap.json';
/*______data_vars__________*/

var data_roadmap = null;
/*_______main_vars_______*/

var m_roadmap = undefined;
sendRequest('GET', d_roadmap).then(function (data) {
  data_roadmap = data;
  add_roadmap();
}).then(function (e) {
  var sec = document.querySelector('#s_roadmap');
  m_roadmap = sec.querySelectorAll('.road');
})["catch"](function (err) {
  return console.log(err);
});

function hamburger() {
  var hamburger = document.querySelector('.hamburger');
  var hamburger_menu = document.querySelector('.header__block');
  var link_elems = document.querySelectorAll('.nav__link');
  var header = document.querySelector('.header');
  var body = document.querySelector('body');
  var preloader = document.querySelector('.preloading');

  hamburger.onclick = function () {
    hamburger.classList.toggle('_active');
  };

  setInterval(function () {
    if (preloader.classList.contains('_active')) {
      body.style.overflow = 'hidden';
    } else if (hamburger.classList.contains("_active")) {
      header.classList.add('header-bg-none');
      hamburger_menu.classList.add('hamburger-menu_active');
      body.style.overflow = 'hidden';
    } else {
      header.classList.remove('header-bg-none');
      hamburger_menu.classList.remove('hamburger-menu_active');
      body.style.overflow = 'auto';
    }
  }, 100);
  link_elems.forEach(function (item, i) {
    item.onclick = function () {
      hamburger.classList.remove("_active");
      window.location.hash = '';
    };
  });
}

hamburger();
;

function header_fix() {
  var header = document.querySelector('.header');

  document.onscroll = function () {
    showHeader();
  };

  function showHeader() {
    if (window.pageYOffset > 200) {
      header.classList.add('header_fixed');
    } else {
      header.classList.remove('header_fixed');
    }
  }
}

header_fix();
;

function add_roadmap() {
  var roadmap_cont = document.querySelector('#roadmap_cont');
  var _lang = '';
  f_check_lang();
  data_roadmap.roadmap.forEach(function (el, i) {
    var html = '';
    var first = "<div class=\"road\" data-aos>\n\t\t\t<div class=\"road__block\">\n\t\t\t\t<h3 class=\"date\">".concat(el[_lang].date, "</h3>\n\t\t\t\t<h5 class=\"name\">").concat(el[_lang].title, "</h5>\n\t\t\t\t<ul class=\"road__list\">");
    var list = '';
    var end = "</ul>\n\t\t\t</div>\n\t\t\t<div class=\"point\">\n\t\t\t\t<svg><use xlink:href=\"./assets/icons/svg/sprite.svg#arrows\"></use></svg>\n\t\t\t</div>\n\t\t</div>";
    if (el[_lang].list) el[_lang].list.forEach(function (item) {
      return list += "<li class=\"road__el\">".concat(item, "</li>");
    });
    html = first + list + end;
    roadmap_cont.insertAdjacentHTML('beforeEnd', html);
  });

  function f_check_lang() {
    var ls = window.localStorage;

    if (!ls.pandemonium_lang) {
      ls.setItem('pandemonium_lang', 'en');
      _lang = ls.pandemonium_lang;
    } else {
      _lang = ls.pandemonium_lang;
    }
  }

  AOS.refresh;
}

;

function anchors() {
  var anchors = document.querySelectorAll("a[href*='#']");

  var _iterator = _createForOfIteratorHelper(anchors),
      _step;

  try {
    var _loop = function _loop() {
      var anchor = _step.value;
      anchor.addEventListener('click', function (event) {
        event.preventDefault();
        var blockID = anchor.getAttribute('href');
        document.querySelector('' + blockID).scrollIntoView({
          behavior: "smooth",
          block: "start"
        });
      });
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

anchors();
;
AOS.init({
  // Global settings:
  disable: false,
  // accepts following values: 'phone', 'tablet', 'mobile', boolean, expression or function
  startEvent: 'DOMContentLoaded',
  // name of the event dispatched on the document, that AOS should initialize on
  initClassName: 'aos-init',
  // class applied after initialization
  animatedClassName: 'aos-animate',
  // class applied on animation
  useClassNames: false,
  // if true, will add content of `data-aos` as classes on scroll
  disableMutationObserver: false,
  // disables automatic mutations' detections (advanced)
  debounceDelay: 50,
  // the delay on debounce used while resizing window (advanced)
  throttleDelay: 99,
  // the delay on throttle used while scrolling the page (advanced)
  // Settings that can be overridden on per-element basis, by `data-aos-*` attributes:
  offset: 120,
  // offset (in px) from the original trigger point
  delay: 0,
  // values from 0 to 3000, with step 50ms
  duration: 400,
  // values from 0 to 3000, with step 50ms
  easing: 'ease',
  // default easing for AOS animations
  once: false,
  // whether animation should happen only once - while scrolling down
  mirror: false,
  // whether elements should animate out while scrolling past them
  anchorPlacement: 'top-bottom' // defines which position of the element regarding to window should trigger the animation

});
window.addEventListener('load', AOS.refresh);

function preloading() {
  var preloader = document.querySelector('.preloading');
  /*
    preloader.classList.add('_active');
  
    window.onload = ()=>{   
      preloader.classList.remove('_active');
    }
  
    setTimeout(()=>{
      preloader.classList.remove('_active');
    }, 5000)*/
}

preloading();
;

function sendRequest(method, url) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open(method, url);
    xhr.responseType = 'json';

    xhr.onload = function () {
      if (xhr.status >= 400) {
        reject(xhr.response);
      } else {
        resolve(xhr.response);
      }
    };

    xhr.onerror = function () {
      reject(xhr.response);
    };

    xhr.send();
  });
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJibG9ja3MvR0VUX1JFUS5qcyIsImJsb2Nrcy9oYW1idXJnZXIuanMiLCJibG9ja3MvaGVhZGVyLmpzIiwiYmxvY2tzL3Nfcm9hZG1hcC5qcyIsImJsb2Nrcy90ZW1wbGF0ZXMvYW5jaG9ycy5qcyIsImJsb2Nrcy90ZW1wbGF0ZXMvYW9zLmpzIiwiYmxvY2tzL3RlbXBsYXRlcy9wcmVsb2FkaW5nLmpzIiwiYmxvY2tzL3RlbXBsYXRlcy9yZXEuanMiXSwibmFtZXMiOlsiZF9yb2FkbWFwIiwiZGF0YV9yb2FkbWFwIiwibV9yb2FkbWFwIiwidW5kZWZpbmVkIiwic2VuZFJlcXVlc3QiLCJ0aGVuIiwiZGF0YSIsImFkZF9yb2FkbWFwIiwiZSIsInNlYyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlcnIiLCJjb25zb2xlIiwibG9nIiwiaGFtYnVyZ2VyIiwiaGFtYnVyZ2VyX21lbnUiLCJsaW5rX2VsZW1zIiwiaGVhZGVyIiwiYm9keSIsInByZWxvYWRlciIsIm9uY2xpY2siLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJzZXRJbnRlcnZhbCIsImNvbnRhaW5zIiwic3R5bGUiLCJvdmVyZmxvdyIsImFkZCIsInJlbW92ZSIsImZvckVhY2giLCJpdGVtIiwiaSIsIndpbmRvdyIsImxvY2F0aW9uIiwiaGFzaCIsImhlYWRlcl9maXgiLCJvbnNjcm9sbCIsInNob3dIZWFkZXIiLCJwYWdlWU9mZnNldCIsInJvYWRtYXBfY29udCIsIl9sYW5nIiwiZl9jaGVja19sYW5nIiwicm9hZG1hcCIsImVsIiwiaHRtbCIsImZpcnN0IiwiZGF0ZSIsInRpdGxlIiwibGlzdCIsImVuZCIsImluc2VydEFkamFjZW50SFRNTCIsImxzIiwibG9jYWxTdG9yYWdlIiwicGFuZGVtb25pdW1fbGFuZyIsInNldEl0ZW0iLCJBT1MiLCJyZWZyZXNoIiwiYW5jaG9ycyIsImFuY2hvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiYmxvY2tJRCIsImdldEF0dHJpYnV0ZSIsInNjcm9sbEludG9WaWV3IiwiYmVoYXZpb3IiLCJibG9jayIsImluaXQiLCJkaXNhYmxlIiwic3RhcnRFdmVudCIsImluaXRDbGFzc05hbWUiLCJhbmltYXRlZENsYXNzTmFtZSIsInVzZUNsYXNzTmFtZXMiLCJkaXNhYmxlTXV0YXRpb25PYnNlcnZlciIsImRlYm91bmNlRGVsYXkiLCJ0aHJvdHRsZURlbGF5Iiwib2Zmc2V0IiwiZGVsYXkiLCJkdXJhdGlvbiIsImVhc2luZyIsIm9uY2UiLCJtaXJyb3IiLCJhbmNob3JQbGFjZW1lbnQiLCJwcmVsb2FkaW5nIiwibWV0aG9kIiwidXJsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJyZXNwb25zZVR5cGUiLCJvbmxvYWQiLCJzdGF0dXMiLCJyZXNwb25zZSIsIm9uZXJyb3IiLCJzZW5kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FDRUE7O0FBRUEsSUFBQUEsU0FBQSxHQUFBLCtCQUFBO0FBR0E7O0FBQ0EsSUFBQUMsWUFBQSxHQUFBLElBQUE7QUFDQTs7QUFDQSxJQUFBQyxTQUFBLEdBQUFDLFNBQUE7QUFJQUMsV0FBQSxDQUFBLEtBQUEsRUFBQUosU0FBQSxDQUFBLENBQ0FLLElBREEsQ0FDQSxVQUFBQyxJQUFBLEVBQUE7QUFDQUwsRUFBQUEsWUFBQSxHQUFBSyxJQUFBO0FBQ0FDLEVBQUFBLFdBQUE7QUFDQSxDQUpBLEVBS0FGLElBTEEsQ0FLQSxVQUFBRyxDQUFBLEVBQUE7QUFDQSxNQUFBQyxHQUFBLEdBQUFDLFFBQUEsQ0FBQUMsYUFBQSxDQUFBLFlBQUEsQ0FBQTtBQUNBVCxFQUFBQSxTQUFBLEdBQUFPLEdBQUEsQ0FBQUcsZ0JBQUEsQ0FBQSxPQUFBLENBQUE7QUFDQSxDQVJBLFdBU0EsVUFBQUMsR0FBQTtBQUFBLFNBQUFDLE9BQUEsQ0FBQUMsR0FBQSxDQUFBRixHQUFBLENBQUE7QUFBQSxD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QTJCLFVBQUEsR0FBQTtBQUNBLE1BQUFoRSxTQUFBLEdBQUFYLFFBQUEsQ0FBQUMsYUFBQSxDQUFBLGFBQUEsQ0FBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBR0EwRSxVQUFBO0FBQUE7O0FDaEJBLFNBQUFqRixXQUFBLENBQUFrRixNQUFBLEVBQUFDLEdBQUEsRUFBQTtBQUNBLFNBQUEsSUFBQUMsT0FBQSxDQUFBLFVBQUFDLE9BQUEsRUFBQUMsTUFBQSxFQUFBO0FBQ0EsUUFBQUMsR0FBQSxHQUFBLElBQUFDLGNBQUEsRUFBQTtBQUVBRCxJQUFBQSxHQUFBLENBQUFFLElBQUEsQ0FBQVAsTUFBQSxFQUFBQyxHQUFBO0FBRUFJLElBQUFBLEdBQUEsQ0FBQUcsWUFBQSxHQUFBLE1BQUE7O0FBRUFILElBQUFBLEdBQUEsQ0FBQUksTUFBQSxHQUFBLFlBQUE7QUFDQSxVQUFBSixHQUFBLENBQUFLLE1BQUEsSUFBQSxHQUFBLEVBQUE7QUFDQU4sUUFBQUEsTUFBQSxDQUFBQyxHQUFBLENBQUFNLFFBQUEsQ0FBQTtBQUNBLE9BRkEsTUFFQTtBQUNBUixRQUFBQSxPQUFBLENBQUFFLEdBQUEsQ0FBQU0sUUFBQSxDQUFBO0FBQ0E7QUFDQSxLQU5BOztBQVFBTixJQUFBQSxHQUFBLENBQUFPLE9BQUEsR0FBQSxZQUFBO0FBQ0FSLE1BQUFBLE1BQUEsQ0FBQUMsR0FBQSxDQUFBTSxRQUFBLENBQUE7QUFDQSxLQUZBOztBQUtBTixJQUFBQSxHQUFBLENBQUFRLElBQUE7QUFDQSxHQXJCQSxDQUFBO0FBc0JBIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIiwiXHJcblxyXG4vKl9fX19fX19zcmNfX19fX19fX3JlcSovXHJcblxyXG5jb25zdCBkX3JvYWRtYXAgPSAnLi9yZXNvdXJjZXMvZGF0YS9yb2FkbWFwLmpzb24nO1xyXG5cclxuXHJcbi8qX19fX19fZGF0YV92YXJzX19fX19fX19fXyovXHJcbnZhciBkYXRhX3JvYWRtYXAgPSBudWxsO1xyXG4vKl9fX19fX19tYWluX3ZhcnNfX19fX19fKi9cclxudmFyIG1fcm9hZG1hcCA9IHVuZGVmaW5lZDtcclxuXHJcblxyXG5cclxuc2VuZFJlcXVlc3QoJ0dFVCcsIGRfcm9hZG1hcClcclxuICAudGhlbihkYXRhID0+IHtcclxuICAgIGRhdGFfcm9hZG1hcCA9IGRhdGE7XHJcbiAgICBhZGRfcm9hZG1hcCgpO1xyXG4gIH0pXHJcbiAgLnRoZW4oZT0+e1xyXG4gICAgbGV0IHNlYyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzX3JvYWRtYXAnKTtcclxuICAgIG1fcm9hZG1hcCA9IHNlYy5xdWVyeVNlbGVjdG9yQWxsKCcucm9hZCcpO1xyXG4gIH0pXHJcbiAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKVxyXG5cclxuXHJcbiIsIlxyXG5mdW5jdGlvbiBoYW1idXJnZXIoKSB7XHJcbiAgdmFyIGhhbWJ1cmdlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oYW1idXJnZXInKTtcclxuICB2YXIgaGFtYnVyZ2VyX21lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyX19ibG9jaycpO1xyXG4gIHZhciBsaW5rX2VsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5hdl9fbGluaycpO1xyXG4gIHZhciBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJyk7XHJcblxyXG4gIHZhciBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xyXG4gIHZhciBwcmVsb2FkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJlbG9hZGluZycpO1xyXG5cclxuICBoYW1idXJnZXIub25jbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGhhbWJ1cmdlci5jbGFzc0xpc3QudG9nZ2xlKCdfYWN0aXZlJyk7XHJcbiAgfTtcclxuXHJcbiAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAgaWYocHJlbG9hZGVyLmNsYXNzTGlzdC5jb250YWlucygnX2FjdGl2ZScpKXtcclxuICAgICAgYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nOyAgICAgIFxyXG4gICAgfVxyXG4gICAgZWxzZSBpZihoYW1idXJnZXIuY2xhc3NMaXN0LmNvbnRhaW5zKFwiX2FjdGl2ZVwiKSkge1xyXG4gICAgICBoZWFkZXIuY2xhc3NMaXN0LmFkZCgnaGVhZGVyLWJnLW5vbmUnKTtcclxuICAgICAgaGFtYnVyZ2VyX21lbnUuY2xhc3NMaXN0LmFkZCgnaGFtYnVyZ2VyLW1lbnVfYWN0aXZlJyk7XHJcbiAgICAgIGJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKCdoZWFkZXItYmctbm9uZScpO1xyXG4gICAgICBoYW1idXJnZXJfbWVudS5jbGFzc0xpc3QucmVtb3ZlKCdoYW1idXJnZXItbWVudV9hY3RpdmUnKTtcclxuICAgICAgYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdhdXRvJztcclxuICAgIH1cclxuICB9LCAxMDApO1xyXG5cclxuXHJcbiAgbGlua19lbGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XHJcbiAgICBpdGVtLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGhhbWJ1cmdlci5jbGFzc0xpc3QucmVtb3ZlKFwiX2FjdGl2ZVwiKTtcclxuICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSAnJ1xyXG4gICAgfTtcclxuICB9KTtcclxufVxyXG5cclxuaGFtYnVyZ2VyKCk7XHJcblxyXG4iLCJcclxuZnVuY3Rpb24gaGVhZGVyX2ZpeCgpIHtcclxuICB2YXIgaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpO1xyXG5cclxuICBkb2N1bWVudC5vbnNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHNob3dIZWFkZXIoKTtcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBzaG93SGVhZGVyKCkge1xyXG4gICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA+IDIwMCkge1xyXG4gICAgICBoZWFkZXIuY2xhc3NMaXN0LmFkZCgnaGVhZGVyX2ZpeGVkJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBoZWFkZXIuY2xhc3NMaXN0LnJlbW92ZSgnaGVhZGVyX2ZpeGVkJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5oZWFkZXJfZml4KCk7IiwiZnVuY3Rpb24gYWRkX3JvYWRtYXAoKXtcclxuXHJcblx0Y29uc3Qgcm9hZG1hcF9jb250ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3JvYWRtYXBfY29udCcpO1xyXG5cclxuXHRsZXQgX2xhbmcgPSAnJztcclxuIFx0Zl9jaGVja19sYW5nKCk7XHJcblxyXG5cclxuXHRkYXRhX3JvYWRtYXAucm9hZG1hcC5mb3JFYWNoKChlbCwgaSk9PntcclxuXHRcdGxldCBodG1sID0gJyc7XHJcblxyXG5cdFx0bGV0IGZpcnN0ID0gIGA8ZGl2IGNsYXNzPVwicm9hZFwiIGRhdGEtYW9zPlxyXG5cdFx0XHQ8ZGl2IGNsYXNzPVwicm9hZF9fYmxvY2tcIj5cclxuXHRcdFx0XHQ8aDMgY2xhc3M9XCJkYXRlXCI+JHtlbFtfbGFuZ10uZGF0ZX08L2gzPlxyXG5cdFx0XHRcdDxoNSBjbGFzcz1cIm5hbWVcIj4ke2VsW19sYW5nXS50aXRsZX08L2g1PlxyXG5cdFx0XHRcdDx1bCBjbGFzcz1cInJvYWRfX2xpc3RcIj5gO1xyXG5cclxuXHRcdGxldCBsaXN0ID0gJyc7XHJcblxyXG5cdFx0bGV0IGVuZCA9IGA8L3VsPlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdFx0PGRpdiBjbGFzcz1cInBvaW50XCI+XHJcblx0XHRcdFx0PHN2Zz48dXNlIHhsaW5rOmhyZWY9XCIuL2Fzc2V0cy9pY29ucy9zdmcvc3ByaXRlLnN2ZyNhcnJvd3NcIj48L3VzZT48L3N2Zz5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQ8L2Rpdj5gXHJcblxyXG5cclxuXHRcdGlmKGVsW19sYW5nXS5saXN0KSBlbFtfbGFuZ10ubGlzdC5mb3JFYWNoKGl0ZW0gPT4gbGlzdCArPSBgPGxpIGNsYXNzPVwicm9hZF9fZWxcIj4ke2l0ZW19PC9saT5gKVxyXG5cclxuXHRcdGh0bWwgPSBmaXJzdCtsaXN0K2VuZDtcclxuXHJcblx0XHRyb2FkbWFwX2NvbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVFbmQnLCBodG1sKVxyXG5cdH0pXHJcblxyXG5cdFxyXG5cdGZ1bmN0aW9uIGZfY2hlY2tfbGFuZygpe1xyXG5cdCAgbGV0IGxzID0gd2luZG93LmxvY2FsU3RvcmFnZTtcclxuXHJcblx0ICBpZighbHMucGFuZGVtb25pdW1fbGFuZyl7XHJcblx0ICAgIGxzLnNldEl0ZW0oJ3BhbmRlbW9uaXVtX2xhbmcnLCAnZW4nKTtcclxuXHQgICAgX2xhbmcgPSBscy5wYW5kZW1vbml1bV9sYW5nO1xyXG5cdCAgfWVsc2V7XHJcblx0ICAgIF9sYW5nID0gbHMucGFuZGVtb25pdW1fbGFuZztcclxuXHQgIH1cclxuXHJcblx0fVxyXG5cclxuXHRBT1MucmVmcmVzaDtcclxuXHRcclxufSIsImZ1bmN0aW9uIGFuY2hvcnMoKXtcclxuXHJcblx0Y29uc3QgYW5jaG9ycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJhW2hyZWYqPScjJ11cIik7XHJcblxyXG5cdGZvcihsZXQgYW5jaG9yIG9mIGFuY2hvcnMpe1xyXG5cdFx0YW5jaG9yLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpe1xyXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRjb25zdCBibG9ja0lEID0gYW5jaG9yLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xyXG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcnICsgYmxvY2tJRCkuc2Nyb2xsSW50b1ZpZXcoe1xyXG5cdFx0XHRcdGJlaGF2aW9yOiBcInNtb290aFwiLFxyXG5cdFx0XHRcdGJsb2NrOiBcInN0YXJ0XCJcclxuXHRcdFx0fSlcclxuXHRcdH0pXHJcblx0fVxyXG5cclxufVxyXG5cclxuYW5jaG9ycygpOyIsIkFPUy5pbml0KHtcclxuICAvLyBHbG9iYWwgc2V0dGluZ3M6XHJcbiAgZGlzYWJsZTogZmFsc2UsIC8vIGFjY2VwdHMgZm9sbG93aW5nIHZhbHVlczogJ3Bob25lJywgJ3RhYmxldCcsICdtb2JpbGUnLCBib29sZWFuLCBleHByZXNzaW9uIG9yIGZ1bmN0aW9uXHJcbiAgc3RhcnRFdmVudDogJ0RPTUNvbnRlbnRMb2FkZWQnLCAvLyBuYW1lIG9mIHRoZSBldmVudCBkaXNwYXRjaGVkIG9uIHRoZSBkb2N1bWVudCwgdGhhdCBBT1Mgc2hvdWxkIGluaXRpYWxpemUgb25cclxuICBpbml0Q2xhc3NOYW1lOiAnYW9zLWluaXQnLCAvLyBjbGFzcyBhcHBsaWVkIGFmdGVyIGluaXRpYWxpemF0aW9uXHJcbiAgYW5pbWF0ZWRDbGFzc05hbWU6ICdhb3MtYW5pbWF0ZScsIC8vIGNsYXNzIGFwcGxpZWQgb24gYW5pbWF0aW9uXHJcbiAgdXNlQ2xhc3NOYW1lczogZmFsc2UsIC8vIGlmIHRydWUsIHdpbGwgYWRkIGNvbnRlbnQgb2YgYGRhdGEtYW9zYCBhcyBjbGFzc2VzIG9uIHNjcm9sbFxyXG4gIGRpc2FibGVNdXRhdGlvbk9ic2VydmVyOiBmYWxzZSwgLy8gZGlzYWJsZXMgYXV0b21hdGljIG11dGF0aW9ucycgZGV0ZWN0aW9ucyAoYWR2YW5jZWQpXHJcbiAgZGVib3VuY2VEZWxheTogNTAsIC8vIHRoZSBkZWxheSBvbiBkZWJvdW5jZSB1c2VkIHdoaWxlIHJlc2l6aW5nIHdpbmRvdyAoYWR2YW5jZWQpXHJcbiAgdGhyb3R0bGVEZWxheTogOTksIC8vIHRoZSBkZWxheSBvbiB0aHJvdHRsZSB1c2VkIHdoaWxlIHNjcm9sbGluZyB0aGUgcGFnZSAoYWR2YW5jZWQpXHJcblxyXG5cclxuICAvLyBTZXR0aW5ncyB0aGF0IGNhbiBiZSBvdmVycmlkZGVuIG9uIHBlci1lbGVtZW50IGJhc2lzLCBieSBgZGF0YS1hb3MtKmAgYXR0cmlidXRlczpcclxuICBvZmZzZXQ6IDEyMCwgLy8gb2Zmc2V0IChpbiBweCkgZnJvbSB0aGUgb3JpZ2luYWwgdHJpZ2dlciBwb2ludFxyXG4gIGRlbGF5OiAwLCAvLyB2YWx1ZXMgZnJvbSAwIHRvIDMwMDAsIHdpdGggc3RlcCA1MG1zXHJcbiAgZHVyYXRpb246IDQwMCwgLy8gdmFsdWVzIGZyb20gMCB0byAzMDAwLCB3aXRoIHN0ZXAgNTBtc1xyXG4gIGVhc2luZzogJ2Vhc2UnLCAvLyBkZWZhdWx0IGVhc2luZyBmb3IgQU9TIGFuaW1hdGlvbnNcclxuICBvbmNlOiBmYWxzZSwgLy8gd2hldGhlciBhbmltYXRpb24gc2hvdWxkIGhhcHBlbiBvbmx5IG9uY2UgLSB3aGlsZSBzY3JvbGxpbmcgZG93blxyXG4gIG1pcnJvcjogZmFsc2UsIC8vIHdoZXRoZXIgZWxlbWVudHMgc2hvdWxkIGFuaW1hdGUgb3V0IHdoaWxlIHNjcm9sbGluZyBwYXN0IHRoZW1cclxuICBhbmNob3JQbGFjZW1lbnQ6ICd0b3AtYm90dG9tJywgLy8gZGVmaW5lcyB3aGljaCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCByZWdhcmRpbmcgdG8gd2luZG93IHNob3VsZCB0cmlnZ2VyIHRoZSBhbmltYXRpb25cclxuXHJcbn0pO1xyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBBT1MucmVmcmVzaCkiLCJmdW5jdGlvbiBwcmVsb2FkaW5nKCl7XHJcbiAgbGV0IHByZWxvYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcmVsb2FkaW5nJyk7XHJcbi8qXHJcbiAgcHJlbG9hZGVyLmNsYXNzTGlzdC5hZGQoJ19hY3RpdmUnKTtcclxuXHJcbiAgd2luZG93Lm9ubG9hZCA9ICgpPT57ICAgXHJcbiAgICBwcmVsb2FkZXIuY2xhc3NMaXN0LnJlbW92ZSgnX2FjdGl2ZScpO1xyXG4gIH1cclxuXHJcbiAgc2V0VGltZW91dCgoKT0+e1xyXG4gICAgcHJlbG9hZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ19hY3RpdmUnKTtcclxuICB9LCA1MDAwKSovXHJcblxyXG59XHJcblxyXG5cclxucHJlbG9hZGluZygpOyIsImZ1bmN0aW9uIHNlbmRSZXF1ZXN0KG1ldGhvZCwgdXJsKXtcclxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PntcclxuICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cclxuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsKTtcclxuXHJcbiAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xyXG5cclxuICAgIHhoci5vbmxvYWQgPSAoKSA9PntcclxuICAgICAgaWYoeGhyLnN0YXR1cyA+PSA0MDApe1xyXG4gICAgICAgIHJlamVjdCh4aHIucmVzcG9uc2UpO1xyXG4gICAgICB9ZWxzZXtcclxuICAgICAgICByZXNvbHZlKHhoci5yZXNwb25zZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB4aHIub25lcnJvciA9ICgpID0+e1xyXG4gICAgICByZWplY3QoeGhyLnJlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgeGhyLnNlbmQoKTtcclxuICB9KVxyXG59Il19
