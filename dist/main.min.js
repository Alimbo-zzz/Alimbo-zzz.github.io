"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*_______________packs_____*/
var pack_1 = [{
  img: '1',
  title: 'Neyada’s older sister',
  text: 'She looks just like a real girl, but she lives under water and wants to meet you. Does that sound tempting? Make no mistake, her sharp teeth can easily destroy your heart.'
}, {
  img: '2',
  title: 'Neyada’s evil older sister',
  text: 'Oh, no you’ve angered Neyada’s older sister! How do i know? She’s trying to get ashore after you. Don’t let her cute swimsuit seduce you – these are just hunting equipment.'
}, {
  img: '3',
  title: 'Neyada’s older tsundere sister',
  text: 'Wait, did she just  call you oni–chan? You are in great danger! It seems like she’s going to kill you right now, is she not? I don’t know, just figure it out for yourself, baka!'
}, {
  img: '4',
  title: 'Neyada’s Soviet older sister',
  text: 'What?!! Why did you tell her about USSR??! Now she wants not only to catch you, but also to share you with all her sisters.'
}, {
  img: '5',
  title: 'Waifu Neyada’s older sister',
  text: 'Oh, did she propose to you? Well, let’s hope that “happily ever after” will be realy long... No, no, i’m not insinuating anything, just saying!'
}];
var pack_2 = [{
  img: '1',
  title: 'Styx’s waters Nymph',
  text: 'Mysterious, cold and unconscious. She will call you into her waters. If you agree, you will forget the past and become her servant.'
}, {
  img: '2',
  title: 'Nymph is ordinary',
  text: 'Don’t let her look deceive you. Seducing you with a beautiful voice, she will drag you to the bottom of the river. And eat you.'
}, {
  img: '3',
  title: 'Little Nymph of Great Lava Flow',
  text: 'She is inevitable like a volcanic eruption. Her character is fire. Do not touch her, you will definitely burn yourself.'
}, {
  img: '4',
  title: 'Queen of Dark Matter',
  text: 'Where all the water elements of the Underworld converge, she dwells. She is insanely beautiful and dangerous. The Queen’s power is truly limitless, and it is unreal to win over your side.'
}, {
  img: '5',
  title: 'Nymph of Underworld sea',
  text: 'The waters of this sea are very salty. On the surface of the water, you can find glowing flowers. Bring them to Naiad and maybe you will get her blessing.'
}];
/*_________________________team______________*/

var data_team = [{
  img: 'Denis',
  name: 'Denis Gorbatovsky',
  work: 'Creative Designer',
  about: 'Hi, my name is Denis. I am a game designer. My mission on this project is to look for ideas and inspire the team for further work. Unpredictable like a deep dark fantasy. Fluffy like your teddy bear.'
}, {
  img: 'Oleg',
  name: 'Oleg Serdyuk',
  work: 'Technical Director',
  about: 'Jew. Israeli. Cat lover I like to organize work I eat kiwi with peel'
}, {
  img: 'Alim',
  name: 'Mambetov Alim',
  work: 'Front-End developer',
  about: 'I love going to the gym, developing cool js features and watching movies in the evenings. Credo: Those who live in the past have no future.'
}, {
  img: 'Oksana',
  name: 'Oksana Bahina',
  work: 'Project Manager',
  about: 'I am a Project Manager. I\'m is a very cutie daemon. 🐥 Love: bananas, post-punk, nature, art. I really want to stroke a capybara. Life is adventure time. Let\'s play (:'
}, {
  img: 'Dmitry',
  name: 'Dmitry Makarov',
  work: 'Blockchain Enjoyer',
  about: 'My name is Dima and I am a developer I\'ve been watching blockchain technology and cryptocurrencies for a long time I want to contribute to the development of this industry.'
}, {
  img: 'Pauline',
  name: 'Pauline Virki',
  work: 'UX/UI Designer',
  about: 'Hey whats up?  I love coffee and kfc and also croissants.'
}, {
  img: 'Vlad',
  name: 'Vlad Samovarov',
  work: 'UX/UI Designer',
  about: 'My hobbies include music, sports, reading, travel. By the way, it is my love of travel that is often combined with work.'
}, {
  img: 'Rimma',
  name: 'Rimma Shigapova',
  work: 'Artist/Designer',
  about: 'My name is Rimma. I am an artist in team and artist in life. I draw in anime style, engage in creative work. My motto: how do I draw, I\'m not liking this art anymore'
}, {
  img: 'Andrey',
  name: 'Andrey Konarev',
  work: 'Social Media Manager',
  about: 'Homo ceu gladius est, aut officiis fungitur aut hebes est'
}, {
  img: 'Arina',
  name: 'Arina Blinova',
  work: 'Scenarist/Copywriter',
  about: 'Hey! I\'m Arina, a game writer. My job is to create stories and characters for our projects. I love D&D and memes about cats, especially the one about the clothespin.'
}, {
  img: 'Anastasia',
  name: 'Anastasia Zhuleva',
  work: 'UX/UI Designer',
  about: 'I am Nastya, a UX / UI designer 🙂 I’m fond of watching TV series (too much, I think this is an addiction), snowboarding and creating cool interfaces🤙🏼'
}];
;

function dark_theme() {
  var main_cont = document.querySelector('.mainContent');
  var logo = document.querySelector('.logo');

  logo.onclick = function () {
    main_cont.classList.toggle('_dark');
  };
}

dark_theme();
;

function hamburger() {
  var hamburger = document.querySelector('.hamburger');
  var hamburger_menu = document.querySelector('.nav');
  var link_elems = document.querySelectorAll('.nav__link');
  var header = document.querySelector('.header');
  var body = document.querySelector('body');

  hamburger.onclick = function () {
    hamburger.classList.toggle('_active');
  };

  setInterval(function () {
    if (hamburger.classList.contains("_active")) {
      header.classList.add('header-bg-none');
      hamburger_menu.classList.add('hamburger-menu_active');
      body.style.overflow = 'hidden';
    } else {
      header.classList.remove('header-bg-none');
      hamburger_menu.classList.remove('hamburger-menu_active');
      body.style.overflow = 'auto';
    }
  }, 100);
  link_elems.forEach(function (item, i) {
    item.onclick = function () {
      hamburger.classList.remove("_active");
    };
  });
}

hamburger();
;

function header_fix() {
  var header = document.querySelector('.header');

  document.onscroll = function () {
    showHeader();
  };

  function showHeader() {
    if (window.pageYOffset > 200) {
      header.classList.add('header_fixed');
    } else {
      header.classList.remove('header_fixed');
    }
  }
}

header_fix();
;

function hover_bg_img() {
  var slide_box = document.querySelector('.hover-img-bg');

  slide_box.onmousedown = function () {
    slide_box.onmousemove = function (e) {
      var x = e.offsetX;
      document.querySelector('.hover-img-bg__box').style.width = x + 'px';
    };
  };

  slide_box.addEventListener("touchstart", function (e_1) {
    document.querySelector('.hover-img-bg__box').style.width = e_1.touches[0].pageX + 'px';
    slide_box.addEventListener("touchmove", function (e_2) {
      var x = e_2.touches[0].pageX;
      document.querySelector('.hover-img-bg__box').style.width = x + 'px';
    });
  });

  slide_box.onmouseup = function () {
    slide_box.onmousemove = null;
  };

  slide_box.onmouseleave = function () {
    slide_box.onmousemove = null;
  };
}

hover_bg_img();
;
;
var slider_1 = new Splide('#slider-cards_1', {
  perPage: 4,
  perMove: 1,
  arrows: false,
  type: 'loop',
  pagination: true,
  autoplay: true
}).mount();
/*____________________________________*/

var slider_2 = new Splide('#slider-cards_2', {
  perPage: 4,
  perMove: 1,
  arrows: false,
  type: 'loop',
  pagination: true,
  autoplay: true
}).mount();

function addCard(slider_splide, slider_id, pack_name, pack) {
  var slider = slider_splide;
  var slider_list = document.querySelector(slider_id).querySelector('.splide__list');
  var slider_slides = slider_list.querySelectorAll('.splide__slide');
  slider_slides.forEach(function (el) {
    return el.remove();
  });
  pack.forEach(function (el) {
    slider.add("<li class=\"splide__slide\">\n        <div class=\"card\">\n          <button class=\"flip\">\n            <svg><use xlink:href=\"./assets/icons/svg/sprite.svg#flip\"></use></svg>\n          </button>\n          <div class=\"front\">\n            <img src=\"./assets/images/".concat(pack_name, "/").concat(el.img, ".png\"/>\n          </div>\n          <div class=\"back\">\n            <img src=\"./assets/images/").concat(pack_name, "/").concat(el.img, ".png\"/>\n            <div class=\"back__block\">\n              <h5 class=\"title\">").concat(el.title, "</h5>\n              <p class=\"text scroll_1\">").concat(el.text, "</p>\n            </div>\n          </div>\n        </div>\n      </li>>"));
  });
  btn_flip();
}

addCard(slider_1, '#slider-cards_1', 'pack_1', pack_1);
addCard(slider_2, '#slider-cards_2', 'pack_2', pack_2);
/*____card_flip*/

function btn_flip() {
  var btns = document.querySelectorAll('.flip');
  btns.forEach(function (btn) {
    btn.onclick = function () {
      var card = btn.parentNode;
      card.classList.toggle('_active');
    };
  });
}

;
var team_slider = new Splide('.team', {
  perPage: 4,
  perMove: 1,
  pagination: true,
  autoplay: true
}).mount();

function team_add() {
  var team_list = document.querySelector('.team');
  var team_el = team_list.querySelectorAll('.splide__slide');
  team_el.forEach(function (el) {
    return el.remove();
  });
  data_team.forEach(function (el) {
    add(el);
  });

  function add(el) {
    team_slider.add("<li class=\"splide__slide team__el\" data-aos=\"zoom-in\" >\n        <div class=\"team__el\">\n          <div class=\"team__box\">\n            <img src=\"./assets/images/team/".concat(el.img, ".png\" class=\"img_b\"/>\n            <img src=\"./assets/images/team/").concat(el.img, "_w.png\" class=\"img_w\"/>\n            <div class=\"info\">\n              <div class=\"name\">").concat(el.name, "</div>\n              <div class=\"work\">").concat(el.work, "</div>\n              <div class=\"text scroll_1\">").concat(el.about, "</div>\n            </div>\n            <button class=\"more\"></button>\n          </div>\n        </div>\n      </li>"));
  }

  team_btns();
}

team_add();

function team_btns() {
  var btns = document.querySelectorAll('.more');
  btns.forEach(function (btn) {
    btn.onclick = function () {
      btn.parentNode.classList.toggle('_active');
    };
  });
}

function remove_team(elms) {
  elms.forEach(function (el) {
    return remove();
  });
}

;

function anchors() {
  var anchors = document.querySelectorAll("a[href*='#']");

  var _iterator = _createForOfIteratorHelper(anchors),
      _step;

  try {
    var _loop = function _loop() {
      var anchor = _step.value;
      anchor.addEventListener('click', function (event) {
        event.preventDefault();
        var blockID = anchor.getAttribute('href');
        document.querySelector('' + blockID).scrollIntoView({
          behavior: "smooth",
          block: "start"
        });
      });
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

anchors();
;
AOS.init({
  // Global settings:
  disable: false,
  // accepts following values: 'phone', 'tablet', 'mobile', boolean, expression or function
  startEvent: 'DOMContentLoaded',
  // name of the event dispatched on the document, that AOS should initialize on
  initClassName: 'aos-init',
  // class applied after initialization
  animatedClassName: 'aos-animate',
  // class applied on animation
  useClassNames: false,
  // if true, will add content of `data-aos` as classes on scroll
  disableMutationObserver: false,
  // disables automatic mutations' detections (advanced)
  debounceDelay: 50,
  // the delay on debounce used while resizing window (advanced)
  throttleDelay: 99,
  // the delay on throttle used while scrolling the page (advanced)
  // Settings that can be overridden on per-element basis, by `data-aos-*` attributes:
  offset: 120,
  // offset (in px) from the original trigger point
  delay: 0,
  // values from 0 to 3000, with step 50ms
  duration: 400,
  // values from 0 to 3000, with step 50ms
  easing: 'ease',
  // default easing for AOS animations
  once: false,
  // whether animation should happen only once - while scrolling down
  mirror: false,
  // whether elements should animate out while scrolling past them
  anchorPlacement: 'top-bottom' // defines which position of the element regarding to window should trigger the animation

});
window.addEventListener('load', AOS.refresh);

function media(slider_1, slider_2, slider_team) {
  // options;
  var large = false;
  var lar_slides = 4;
  var desktop = true;
  var d_slides = 3;
  var laptop = false;
  var l_slides = 2;
  var tablet = false;
  var t_slides = 1;
  var phone = false;
  var p_slides = 1;
  var slidesToShow = 0;
  var mediaLarge = window.matchMedia('(min-width: 1280px)');
  var mediaDesktop = window.matchMedia('(max-width: 1280px)');
  var mediaLaptop = window.matchMedia('(max-width: 1024px)');
  var mediaTablet = window.matchMedia('(max-width: 820px)');
  var mediaPhone = window.matchMedia('(max-width: 480px)');

  if (mediaLarge.matches) {
    tablet = false;
    laptop = false;
    phone = false;
    desktop = false;
    large = true;
  }

  if (mediaDesktop.matches) {
    tablet = false;
    laptop = false;
    phone = false;
    large = false;
    desktop = true;
  }

  if (mediaLaptop.matches) {
    desktop = false;
    tablet = false;
    phone = false;
    large = false;
    laptop = true;
  }

  if (mediaTablet.matches) {
    desktop = false;
    laptop = false;
    phone = false;
    large = false;
    tablet = true;
  }

  if (mediaPhone.matches) {
    tablet = false;
    laptop = false;
    desktop = false;
    large = false;
    phone = true;
  }

  if (large) {
    slidesToShow = lar_slides;
  }

  if (desktop) {
    slidesToShow = d_slides;
  }

  if (laptop) {
    slidesToShow = l_slides;
  }

  if (tablet) {
    slidesToShow = t_slides;
  }

  if (phone) {
    slidesToShow = p_slides;
  }

  slider_1.options = {
    perPage: slidesToShow
  };
  slider_2.options = {
    perPage: slidesToShow
  };
  slider_team.options = {
    perPage: slidesToShow
  };
}
/*_______________media______*/


media(slider_1, slider_2, team_slider);

window.onresize = function () {
  media(slider_1, slider_2, team_slider);
  img_w_rez();
};
/*img_bg*/


function img_w_rez() {
  var slide_box = document.querySelector('.hover-img-bg');
  var imgs = slide_box.querySelectorAll('img');
  var box_w = slide_box.clientWidth;
  imgs.forEach(function (el) {
    el.style.width = "".concat(box_w, "px");
  });
}

img_w_rez();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
